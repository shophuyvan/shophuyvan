export function formatPrice(v){ return (Number(v)||0).toLocaleString('vi-VN') + 'ƒë'; }
// apps/fe/src/lib/price.js
// Pricing priority: variant (sale|price) > product (sale|price)
// Return shape expected by UIs: { base, original } and keep aliases { sale, regular } for backwards-compat.
export function pickPrice(product, variant){
  if (variant) {
    const sale = num(variant.sale_price ?? variant.price_sale);
    const price = num(variant.price);
    const base = sale>0 ? sale : (price>0 ? price : 0);
    const original = (sale>0 && price>sale) ? price : null;
    return { base, original, sale: base, regular: original };
  }
  const pSale = num(product.sale_price ?? product.price_sale);
  const pPrice = num(product.price);
  const base = pSale>0 ? pSale : (pPrice>0 ? pPrice : 0);
  const original = (pSale>0 && pPrice>pSale) ? pPrice : null;
  return { base, original, sale: base, regular: original };
}

function num(x){ try{ if(x==null||x==='') return 0; return Number(String(x).replace(/\./g,'').replace(/,/g,'.'))||0; }catch{ return 0; } }

// [BEGIN PATCH] pickLowestPrice ‚Äì FE ch·ªâ l·∫•y sale ‚Üí price, tuy·ªát ƒë·ªëi kh√¥ng d√πng cost
export function pickLowestPrice(product){
  const vs = Array.isArray(product?.variants) ? product.variants : [];
  let best = null;

  // ‚úÖ Qu√©t qua T·∫§T C·∫¢ variants ƒë·ªÉ t√¨m gi√° th·∫•p nh·∫•t
  for (const v of vs) {
    // ‚úÖ ∆ØU TI√äN: price_sale > sale_price > price
    const sale = num(v?.price_sale ?? v?.sale_price ?? 0);
    const price = num(v?.price ?? 0);
    
    // ‚úÖ N·∫øu c√≥ sale > 0 th√¨ d√πng sale, kh√¥ng th√¨ d√πng price
    const base = sale > 0 ? sale : (price > 0 ? price : 0);
    if (base <= 0) continue;

    const original = (sale > 0 && price > sale) ? price : null;
    
    // ‚úÖ T√¨m gi√° th·∫•p nh·∫•t
    if (!best || base < best.base) {
      best = { base, original };
    }
  }

  // ‚úÖ N·∫øu KH√îNG C√ì variants ho·∫∑c variants kh√¥ng c√≥ gi√° h·ª£p l·ªá
  if (!best) {
    // ‚ö†Ô∏è Fallback: Ki·ªÉm tra product level (tr∆∞·ªùng h·ª£p s·∫£n ph·∫©m c≈©)
    const pSale = num(product?.price_sale ?? product?.sale_price ?? 0);
    const pPrice = num(product?.price ?? 0);
    const base = pSale > 0 ? pSale : (pPrice > 0 ? pPrice : 0);
    const original = (pSale > 0 && pPrice > pSale) ? pPrice : null;
    best = { base, original };
  }

  // Backward compatibility aliases
  return { ...best, sale: best.base, regular: best.original };
}
// [END PATCH]

// ===================================================================
// WHOLESALE PRICE LOGIC
// ===================================================================

/**
 * Get customer type from localStorage
 */
/**
 * L·∫•y th√¥ng tin kh√°ch h√†ng t·ª´ global/localStorage
 * @returns {object} - customer object
 */
function getCustomerInfo() {
  try {
    // 1. ∆Øu ti√™n th√¥ng tin v·ª´a t·∫£i (t·ª´ cart-badge)
    if (window.currentCustomer) {
      return window.currentCustomer;
    }
    
    // 2. Fallback v·ªÅ localStorage (cho l·∫ßn t·∫£i ƒë·∫ßu ti√™n)
    const customerInfo = localStorage.getItem('customer_info');
    if (!customerInfo) {
      return { tier: 'retail', customer_type: 'retail' }; // Kh√°ch v√£ng lai
    }
    
    const info = JSON.parse(customerInfo);
    const tier = info.tier || 'retail';
    
    // √Ånh x·∫° tier sang discount %
    const tierMap = {
      'retail': { discount: 0, name: 'Th√†nh vi√™n th∆∞·ªùng', icon: 'üë§' },
      'silver': { discount: 3, name: 'Th√†nh vi√™n b·∫°c', icon: 'ü•à' },
      'gold': { discount: 5, name: 'Th√†nh vi√™n v√†ng', icon: 'ü•á' },
      'diamond': { discount: 8, name: 'Th√†nh vi√™n kim c∆∞∆°ng', icon: 'üíé' }
    };
    
    const tierData = tierMap[tier] || tierMap['retail'];
    
    return {
      tier,
      discount: tierData.discount,
      tierName: tierData.name,
      icon: tierData.icon
    };
  } catch {
    return { tier: 'retail', discount: 0, tierName: 'Th√†nh vi√™n th∆∞·ªùng' };
  }
}

/**
 * Pick price based on customer type
 * Wholesale customers see wholesale_price if available
 */
export function pickPriceByCustomer(product, variant) {
  const customer = getCustomerInfo();
  const basePrice = pickPrice(product, variant); // Gi√° b√°n l·∫ª g·ªëc
  const tier = customer.tier || 'retail';
  const type = customer.customer_type || 'retail';

  // --- 1. ∆ØU TI√äN: GI√Å S·ªà ---
  // (Gi·∫£ s·ª≠ lo·∫°i kh√°ch h√†ng 'wholesale' ho·∫∑c 'si')
  if (type === 'wholesale' || type === 'si') {
    const vWholesale = num(variant?.wholesale_price ?? variant?.price_wholesale);
    const pWholesale = num(product?.wholesale_price ?? product?.price_wholesale);
    
    // L·∫•y gi√° s·ªâ (∆∞u ti√™n variant, fallback v·ªÅ product)
    const wholesalePrice = vWholesale > 0 ? vWholesale : (pWholesale > 0 ? pWholesale : 0);

    if (wholesalePrice > 0) {
      return {
        base: wholesalePrice,
        original: basePrice.base > wholesalePrice ? basePrice.base : null, // Gi√° g·ªëc l√† gi√° b√°n l·∫ª
        sale: wholesalePrice,
        regular: basePrice.base > wholesalePrice ? basePrice.base : null,
        tier: tier,
        customer_type: type
      };
    }
  }

  // --- 2. GI√Å THEO H·∫†NG TH√ÄNH VI√äN (cho kh√°ch l·∫ª) ---
  const tierMap = {
    'retail': 0, 'silver': 3, 'gold': 5, 'diamond': 8
  };
  const discountPercent = tierMap[tier] || 0;

  if (discountPercent > 0 && basePrice.base > 0) {
    const discountAmount = basePrice.base * (discountPercent / 100);
    const discountedBase = Math.floor(basePrice.base - discountAmount);
    
    let original = basePrice.original;
    // N·∫øu gi√° g·ªëc kh√¥ng c√≥ (do SP kh√¥ng sale), th√¨ gi√° g·ªëc ch√≠nh l√† gi√° base
    if (!original && discountedBase < basePrice.base) {
      original = basePrice.base;
    }

    return {
      base: discountedBase,
      original: original,
      sale: discountedBase,
      regular: original,
      tier: tier,
      customer_type: type,
      discount: discountPercent // L∆∞u % gi·∫£m gi√°
    };
  }

  // --- 3. FALLBACK: GI√Å B√ÅN L·∫∫ (cho kh√°ch v√£ng lai) ---
  return {
    ...basePrice,
    tier: tier,
    customer_type: type
  };
}


/**
 * Format price with customer type consideration
 */
export function formatPriceByCustomer(product, variant) {
  const priceInfo = pickPriceByCustomer(product, variant);
  
  // C·∫•u h√¨nh tier (ƒë·ªÉ l·∫•y icon v√† t√™n)
  const tierMap = {
    'retail': { name: 'Th√†nh vi√™n th∆∞·ªùng', icon: 'üë§' },
    'silver': { name: 'Th√†nh vi√™n b·∫°c', icon: 'ü•à' },
    'gold': { name: 'Th√†nh vi√™n v√†ng', icon: 'ü•á' },
    'diamond': { name: 'Th√†nh vi√™n kim c∆∞∆°ng', icon: 'üíé' }
  };
  const tierInfo = tierMap[priceInfo.tier] || tierMap['retail'];
  
  let html = '';
  const baseFormatted = formatPrice(priceInfo.base);
  const originalFormatted = priceInfo.original ? formatPrice(priceInfo.original) : null;

  // 1. Lu√¥n hi·ªÉn th·ªã gi√° c∆° s·ªü
  html = `<div><b class="text-rose-600">${baseFormatted}</b>`;

  // 2. Hi·ªÉn th·ªã gi√° g·ªëc (n·∫øu c√≥)
  if (originalFormatted) {
    html += ` <span class="line-through opacity-70 text-sm ml-1">${originalFormatted}</span>`;
  }

  // 3. Hi·ªÉn th·ªã Huy hi·ªáu (Badge)
  // ∆Øu ti√™n Badge "Gi√° s·ªâ"
  if ((priceInfo.customer_type === 'wholesale' || priceInfo.customer_type === 'si') && priceInfo.original) {
    html += ` <span style="background:#4f46e5;color:white;font-size:10px;padding:2px 6px;border-radius:4px;margin-left:6px;font-weight:700;">Gi√° s·ªâ</span>`;
  } 
  // N·∫øu kh√¥ng ph·∫£i s·ªâ, hi·ªÉn th·ªã Badge "H·∫°ng th√†nh vi√™n" (n·∫øu c√≥ gi·∫£m gi√°)
  else if (priceInfo.discount > 0) {
    html += ` <span style="background:#10b981;color:white;font-size:10px;padding:2px 6px;border-radius:4px;margin-left:6px;font-weight:700;">${tierInfo.icon} -${priceInfo.discount}%</span>`;
  }
  
  html += `</div>`;
  
  // 4. Hi·ªÉn th·ªã T√™n h·∫°ng (ch·ªâ cho kh√°ch l·∫ª c√≥ h·∫°ng)
  if (priceInfo.customer_type === 'retail' && priceInfo.tier !== 'retail') {
    html += `<div style="font-size:11px;color:#059669;margin-top:4px;font-weight:600;">${tierInfo.name}</div>`;
  }
  
  return html;
}