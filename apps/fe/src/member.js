// apps/fe/src/member.js
// Trang th√¥ng tin th√†nh vi√™n

const API_BASE = window.API_BASE || 'https://shv-api.shophuyvan.workers.dev';

const TIER_INFO = {
  retail: {
    name: 'Th√†nh vi√™n th∆∞·ªùng',
    icon: 'üë§',
    color: '#6b7280',
    minPoints: 0,
    discount: 0,
    benefits: [
      '‚úì T√≠ch l≈©y ƒëi·ªÉm m·ªói l·∫ßn mua h√†ng',
      '‚úì Truy c·∫≠p c√°c khuy·∫øn m√£i ƒë·ªôc quy·ªÅn',
      '‚úì H·ªó tr·ª£ kh√°ch h√†ng 24/7'
    ]
  },
  silver: {
    name: 'Th√†nh vi√™n b·∫°c',
    icon: 'ü•à',
    color: '#94a3b8',
    minPoints: 1000000,
    discount: 3,
    benefits: [
      '‚úì Gi·∫£m gi√° 3% cho t·∫•t c·∫£ s·∫£n ph·∫©m',
      '‚úì T√≠ch l≈©y ƒëi·ªÉm nhanh h∆°n',
      '‚úì Giao h√†ng ∆∞u ti√™n',
      '‚úì Khuy·∫øn m√£i ƒë·ªôc quy·ªÅn h√†ng th√°ng'
    ]
  },
  gold: {
    name: 'Th√†nh vi√™n v√†ng',
    icon: 'ü•á',
    color: '#fbbf24',
    minPoints: 3000000,
    discount: 5,
    benefits: [
      '‚úì Gi·∫£m gi√° 5% cho t·∫•t c·∫£ s·∫£n ph·∫©m',
      '‚úì T√≠ch l≈©y ƒëi·ªÉm nhanh nh·∫•t',
      '‚úì Giao h√†ng ∆∞u ti√™n + mi·ªÖn ph√≠',
      '‚úì Khuy·∫øn m√£i ƒë·ªôc quy·ªÅn h√†ng tu·∫ßn',
      '‚úì H·ªó tr·ª£ VIP ri√™ng'
    ]
  },
  diamond: {
    name: 'Th√†nh vi√™n kim c∆∞∆°ng',
    icon: 'üíé',
    color: '#06b6d4',
    minPoints: 5000000,
    discount: 8,
    benefits: [
      '‚úì Gi·∫£m gi√° 8% cho t·∫•t c·∫£ s·∫£n ph·∫©m',
      '‚úì T√≠ch l≈©y ƒëi·ªÉm c·ª±c nhanh',
      '‚úì Giao h√†ng ∆∞u ti√™n + mi·ªÖn ph√≠ to√†n qu·ªëc',
      '‚úì Khuy·∫øn m√£i ƒë·∫∑c bi·ªát m·ªói tu·∫ßn',
      '‚úì H·ªó tr·ª£ VIP ƒë·ªôc quy·ªÅn 24/7',
      '‚úì Qu√† t·∫∑ng sinh nh·∫≠t h√†ng nƒÉm'
    ]
  }
};

// DOM Elements
const loadingState = document.getElementById('loadingState');
const errorState = document.getElementById('errorState');
const mainContent = document.getElementById('mainContent');
const errorMessage = document.getElementById('errorMessage');
const tierCard = document.getElementById('tierCard');
const tierIcon = document.getElementById('tierIcon');
const tierName = document.getElementById('tierName');
const tierPoints = document.getElementById('tierPoints');
const progressFill = document.getElementById('progressFill');
const progressText = document.getElementById('progressText');
const tierList = document.getElementById('tierList');

function formatNumber(n) {
  return new Intl.NumberFormat('vi-VN').format(n);
}

function getCurrentTier(points) {
  const p = Number(points || 0);
  if (p >= TIER_INFO.diamond.minPoints) return 'diamond';
  if (p >= TIER_INFO.gold.minPoints) return 'gold';
  if (p >= TIER_INFO.silver.minPoints) return 'silver';
  return 'retail';
}

function getNextTier(currentTier) {
  const tiers = ['retail', 'silver', 'gold', 'diamond'];
  const idx = tiers.indexOf(currentTier);
  return idx < tiers.length - 1 ? tiers[idx + 1] : null;
}

function showLoading() {
  loadingState.style.display = 'block';
  errorState.style.display = 'none';
  mainContent.style.display = 'none';
}

function showError(msg) {
  errorMessage.textContent = msg;
  errorState.style.display = 'block';
  loadingState.style.display = 'none';
  mainContent.style.display = 'none';
}

function showContent() {
  mainContent.style.display = 'block';
  loadingState.style.display = 'none';
  errorState.style.display = 'none';
}

function renderTierCard(tier, points) {
  const info = TIER_INFO[tier];
  tierIcon.textContent = info.icon;
  tierName.textContent = info.name;
  tierPoints.textContent = `${formatNumber(points)} ƒëi·ªÉm`;
  tierCard.style.background = `linear-gradient(135deg, ${info.color} 0%, ${adjustBrightness(info.color, -20)} 100%)`;
}

function renderProgress(currentTier, points) {
  const nextTier = getNextTier(currentTier);
  
  if (!nextTier) {
    // ƒê√£ l√† tier cao nh·∫•t
    progressText.textContent = 'üéâ B·∫°n ƒë√£ ƒë·∫°t h·∫°ng th√†nh vi√™n cao nh·∫•t!';
    progressFill.style.width = '100%';
    return;
  }
  
  const currentMinPoints = TIER_INFO[currentTier].minPoints;
  const nextMinPoints = TIER_INFO[nextTier].minPoints;
  const pointsNeeded = nextMinPoints - points;
  const progress = ((points - currentMinPoints) / (nextMinPoints - currentMinPoints)) * 100;
  
  progressFill.style.width = Math.min(100, Math.max(0, progress)) + '%';
  progressText.textContent = `T√≠ch l≈©y ${formatNumber(pointsNeeded)} ƒëi·ªÉm n·ªØa ƒë·ªÉ l√™n ${TIER_INFO[nextTier].name}`;
}

function renderTierList() {
  const tiers = ['retail', 'silver', 'gold', 'diamond'];
  const token = localStorage.getItem('customer_token') || localStorage.getItem('x-customer-token');
  const customerInfo = JSON.parse(localStorage.getItem('customer_info') || '{}');
  const currentTier = customerInfo.tier || 'retail';
  
  tierList.innerHTML = tiers.map(tier => {
    const info = TIER_INFO[tier];
    const isCurrent = tier === currentTier;
    const isLocked = tier !== currentTier && Object.keys(TIER_INFO).indexOf(tier) > Object.keys(TIER_INFO).indexOf(currentTier);
    
    return `
      <div class="tier-item ${isCurrent ? 'active' : ''} ${isLocked ? 'locked' : ''}">
        <div class="tier-header">
          <div>
            <div class="tier-title">${info.icon} ${info.name}</div>
            <div style="font-size: 12px; color: #6b7280; margin-top: 4px;">
              T·ª´ ${formatNumber(info.minPoints)} ƒëi·ªÉm
            </div>
          </div>
          <div>
            ${isCurrent ? '<span class="tier-badge badge-current">Hi·ªán t·∫°i</span>' : ''}
            ${!isCurrent && !isLocked ? '<span class="tier-badge badge-next">Ti·∫øp theo</span>' : ''}
            ${info.discount > 0 ? `<span style="font-weight: 700; color: #10b981; font-size: 14px;">-${info.discount}%</span>` : ''}
          </div>
        </div>
        <div style="margin-top: 12px;">
          ${info.benefits.map(b => `<div class="tier-benefit">${b}</div>`).join('')}
        </div>
      </div>
    `;
  }).join('');
}

async function init() {
  showLoading();
  
  try {
    const token = localStorage.getItem('customer_token') || 
                  localStorage.getItem('x-customer-token') || 
                  localStorage.getItem('x-token');
    
    if (!token) {
      showError('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem th√¥ng tin th√†nh vi√™n');
      return;
    }
    
    // L·∫•y th√¥ng tin customer t·ª´ localStorage
    const customerInfo = JSON.parse(localStorage.getItem('customer_info') || '{}');
    
    if (!customerInfo.id) {
      showError('Kh√¥ng th·ªÉ l·∫•y th√¥ng tin kh√°ch h√†ng');
      return;
    }
    
    const points = customerInfo.points || 0;
    const tier = customerInfo.tier || getCurrentTier(points);
    
    // Render UI
    renderTierCard(tier, points);
    renderProgress(tier, points);
    renderTierList();
    
    showContent();
    
    console.log('[Member] Loaded:', { tier, points });
    
  } catch (error) {
    console.error('[Member] Error:', error);
    showError('L·ªói khi t·∫£i th√¥ng tin: ' + error.message);
  }
}

function adjustBrightness(color, percent) {
  // ƒê∆°n gi·∫£n h√≥a - tr·∫£ v·ªÅ m√†u ƒë√£ cho
  return color;
}

// Initialize
document.addEventListener('DOMContentLoaded', init);