"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _list = _interopRequireDefault(require("../components/list"));

var _utils = require("../shared/utils");

var _utils2 = require("../../common/utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/* dts-import
import { VirtualList } from 'zmp-core/types';
import { SkeletonEffect } from '../../common/components-enum-props'
*/

/* dts-props
  id?: string | number;
  className?: string;
  style?: React.CSSProperties;
  inset? : boolean
  xsmallInset? : boolean
  smallInset? : boolean
  mediumInset? : boolean
  largeInset? : boolean
  xlargeInset? : boolean
  mediaList? : boolean
  sortable? : boolean
  sortableTapHold? : boolean
  sortableEnabled? : boolean
  sortableMoveElements? : boolean
  sortableOpposite? : boolean
  accordionList? : boolean
  accordionOpposite? : boolean
  contactsList? : boolean
  simpleList? : boolean
  linksList? : boolean
  menuList? : boolean
  noHairlines? : boolean
  noHairlinesBetween? : boolean
  noHairlinesMd? : boolean
  noHairlinesBetweenMd? : boolean
  noHairlinesIos? : boolean
  noHairlinesBetweenIos? : boolean
  noHairlinesAurora? : boolean
  noHairlinesBetweenAurora? : boolean
  noChevron? : boolean
  chevronCenter? : boolean
  tab? : boolean
  tabActive? : boolean
  form? : boolean
  inlineLabels? : boolean
  virtualList? : boolean
  virtualListParams? : Object
  loading: boolean
  skeletonEffect: keyof typeof SkeletonEffect;
  COLOR_PROPS
  onVirtualItemBeforeInsert? : (vl?: VirtualList.VirtualList, itemEl?: HTMLElement, item?: any) => void
  onVirtualBeforeClear? : (vl?: VirtualList.VirtualList, fragment?: any) => void
  onVirtualItemsBeforeInsert? : (vl?: VirtualList.VirtualList, fragment?: any) => void
  onVirtualItemsAfterInsert? : (vl?: VirtualList.VirtualList, fragment?: any) => void
  onSubmit? : (event?: any) => void
  onSortableEnable? : (...args: any[]) => void
  onSortableDisable? : (...args: any[]) => void
  onSortableSort? : (sortData?: any) => void
  onTabShow? : (el?: HTMLElement) => void
  onTabHide? : (el?: HTMLElement) => void
  ref?: React.MutableRefObject<{el: HTMLElement | null; zmpVirtualList: () => VirtualList.VirtualList}>;
  CHILDREN_PROP
*/
var ZMPList = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var _classNames;

  var elRef = (0, _react.useRef)(null);
  var className = props.className,
      loading = props.loading,
      skeletonEffect = props.skeletonEffect;
  var isValidEffectName = (0, _utils2.validateSkeletonEffect)(skeletonEffect);
  var classes = (0, _utils.classNames)((_classNames = {
    'skeleton-text': loading
  }, _classNames["skeleton-effect-" + skeletonEffect] = isValidEffectName && loading, _classNames), className);

  if (!isValidEffectName && loading) {
    classes = (0, _utils.classNames)('skeleton-effect-wave', classes);
  }

  (0, _react.useImperativeHandle)(ref, function () {
    return elRef.current;
  });
  return /*#__PURE__*/_react.default.createElement(_list.default, (0, _extends2.default)({
    ref: elRef
  }, props, {
    className: classes
  }));
});
ZMPList.displayName = 'zmp-list';
var _default = ZMPList;
exports.default = _default;