"use strict";

exports.__esModule = true;
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _utils = require("../shared/utils");

var _constants = require("../../common/constants");

var _utils2 = require("../../common/utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/* dts-props
  id: string | number;
  className: string;
  style: React.CSSProperties;
  online? : boolean;
  story? : boolean;
  size? : 24 | 48 | 56 | 96 | 120;
  src? : any;
  ref?: React.MutableRefObject<{el: HTMLElement | null}>;
  onClick?: (event?: any) => void
  avatarColor: 'blue-lblue'| 'green-lgreen' | 'orange-red' | 'pink-lpurple' | 'lblue-teal' | 'lgreen-yellow' | 'purple-blue' | 'pink-lpink' | 'teal-green' | 'yellow-orange' | 'lpurple-purple' | 'lred-lpink';
  CHILDREN_PROP
*/
var Avatar = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var id = _ref.id,
      children = _ref.children,
      src = _ref.src,
      size = _ref.size,
      online = _ref.online,
      story = _ref.story,
      className = _ref.className,
      style = _ref.style,
      avatarColor = _ref.avatarColor,
      onClick = _ref.onClick;
  var elRef = (0, _react.useRef)(null);
  (0, _react.useImperativeHandle)(ref, function () {
    return {
      el: elRef.current
    };
  });

  var handleOnClick = function handleOnClick(e) {
    if (typeof onClick === 'function') {
      onClick(e);
    }
  };

  var bgColor = _constants.AVATAR_COLOR_PROPS[avatarColor] || '';

  if (typeof children === 'string' && !bgColor) {
    bgColor = (0, _utils2.calculateAvatarColor)(children) || _constants.AVATAR_DEFAULT_BG_COLOR[0];
  }

  var sizeClass = _constants.AVATAR_SIZE[size] || '';
  var classes = (0, _utils.classNames)('avatar', {
    'avatar-story': story
  }, sizeClass, className);
  return /*#__PURE__*/_react.default.createElement("div", {
    id: id,
    ref: elRef,
    onClick: handleOnClick,
    className: classes,
    style: style
  }, src ? /*#__PURE__*/_react.default.createElement("img", {
    className: "avatar-image",
    src: src,
    alt: ""
  }) : /*#__PURE__*/_react.default.createElement("div", {
    className: "avatar-inner " + bgColor
  }, children), online && /*#__PURE__*/_react.default.createElement("span", {
    className: "avatar-online"
  }));
});
Avatar.displayName = 'zmp-avatar';
var _default = Avatar;
exports.default = _default;