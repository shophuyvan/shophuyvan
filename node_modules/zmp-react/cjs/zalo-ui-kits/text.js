"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _utils = require("../shared/utils");

var _constants = require("../../common/constants");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/* dts-props
  className?: string;
  style?: React.CSSProperties;
  size?: 'xxxsmall' | 'xxsmall' | 'xsmall' | 'small' | 'normal' | 'large' | 'xlarge';
  bold?: boolean;
  fontSize?: number;
  noSpace?: boolean
  ref?: React.MutableRefObject<{el: HTMLElement | null;}>;
  CHILDREN_PROP
*/
var Text = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var elRef = (0, _react.useRef)(null);
  var size = props.size,
      className = props.className,
      style = props.style,
      bold = props.bold,
      noSpacing = props.noSpacing,
      fontSize = props.fontSize;
  var classes = (0, _utils.classNames)(className, 'typo-body', {
    'typo-body-bold': bold,
    'typo-body-xxxsmall': size === 'xxxsmall',
    'typo-body-xxsmall': size === 'xxsmall',
    'typo-body-xsmall': size === 'xsmall',
    'typo-body-small': size === 'small',
    'typo-body-normal': !size || size === 'normal',
    'typo-body-large': size === 'large',
    'typo-body-xlarge': size === 'xlarge',
    'typo-body-no-spacing': noSpacing
  });
  var styles = {};

  if (!size && fontSize) {
    var lineHeight = _constants.FONT_SIZE_LINE_HEIGHT_MAP[fontSize];

    if (lineHeight) {
      styles.fontSize = fontSize + "px";
      styles.lineHeight = lineHeight + "px";
    }
  }

  (0, _react.useImperativeHandle)(ref, function () {
    return {
      el: ref.current
    };
  });
  return /*#__PURE__*/_react.default.createElement("p", {
    ref: elRef,
    className: classes,
    style: (0, _extends2.default)({}, styles, style)
  }, props.children);
});
Text.displayName = 'zmp-text';
var _default = Text;
exports.default = _default;