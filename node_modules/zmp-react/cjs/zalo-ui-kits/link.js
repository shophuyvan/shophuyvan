"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _utils = require("../../common/utils");

var _zmp = require("../shared/zmp");

var _utils2 = require("../shared/utils");

var _mixins = require("../shared/mixins");

var _useIcon = require("../shared/use-icon");

var _useRouteProps = require("../shared/use-route-props");

var _useTooltip = require("../shared/use-tooltip");

var _tabbarContext = require("../shared/tabbar-context");

var _badge = _interopRequireDefault(require("../components/badge"));

var _useSmartSelect = require("../shared/use-smart-select");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/* dts-imports
import { SmartSelect } from 'zmp-core/types';
import { Icon } from 'zmp-core/types';
*/

/* dts-props
  id?: string | number;
  className?: string;
  style?: React.CSSProperties;
  noLinkClass? : boolean
  text? : string
  tabLink? : boolean | string
  tabLinkActive? : boolean
  tabbarLabel? : boolean
  iconOnly? : boolean
  badge? : string | number
  badgeColor? : string
  iconBadge? : string | number
  href? : string | boolean
  tooltip? : string
  tooltipTrigger? : string
  COLOR_PROPS
  ICON_PROPS
  ACTIONS_PROPS
  ROUTER_PROPS
  onClick? : (event?: any) => void
  ref?: React.MutableRefObject<{el: HTMLElement | null}>;
  iconZMP: Icon.IconZMP
  CHILDREN_PROP
*/
var ZMPLink = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var _zmpSmartSelect = (0, _react.useRef)(null);

  var className = props.className,
      id = props.id,
      style = props.style,
      children = props.children,
      noLinkClass = props.noLinkClass,
      text = props.text,
      tabLink = props.tabLink,
      tabLinkActive = props.tabLinkActive,
      tabbarLabel = props.tabbarLabel,
      iconOnly = props.iconOnly,
      badge = props.badge,
      badgeColor = props.badgeColor,
      _props$href = props.href,
      href = _props$href === void 0 ? '#' : _props$href,
      target = props.target,
      smartSelect = props.smartSelect,
      smartSelectParams = props.smartSelectParams,
      onClick = props.onClick;
  var tabbarContext = (0, _react.useContext)(_tabbarContext.TabbarContext);
  var isTabbarLabel = tabbarLabel || tabbarContext.tabbarHasLabels;
  var extraAttrs = (0, _utils2.getExtraAttrs)(props);
  var elRef = (0, _react.useRef)(null);
  (0, _react.useImperativeHandle)(ref, function () {
    return {
      el: elRef.current,
      zmpSmartSelect: function zmpSmartSelect() {
        return _zmpSmartSelect.current;
      }
    };
  });
  (0, _useTooltip.useTooltip)(elRef, props);
  (0, _useRouteProps.useRouteProps)(elRef, props);
  (0, _useSmartSelect.useSmartSelect)(smartSelect, smartSelectParams, _zmpSmartSelect, function () {
    return elRef.current;
  });
  var linkTarget = target;
  var url = href;
  var disabledLink = false;
  var _zmp$routes = _zmp.zmp.routes,
      routes = _zmp$routes === void 0 ? [] : _zmp$routes;
  var paths = (0, _react.useMemo)(function () {
    return routes.map(function (route) {
      return route.path;
    });
  }, []);

  if (url && url !== '#' && !(0, _utils.validateUrl)(url, paths)) {
    url = '#';
    disabledLink = true;
  }

  var textEl;
  var badgeEl;

  if (text) {
    if (badge) badgeEl = /*#__PURE__*/_react.default.createElement(_badge.default, {
      color: badgeColor
    }, badge);
    textEl = /*#__PURE__*/_react.default.createElement("span", {
      className: isTabbarLabel ? 'tabbar-label' : ''
    }, text, badgeEl);
  }

  var iconEl = (0, _useIcon.useIcon)(props);
  var iconOnlyComputed;

  if (iconOnly || !text && children && children.length === 0 || !text && !children) {
    iconOnlyComputed = true;
  } else {
    iconOnlyComputed = false;
  }

  var classes = (0, _utils2.classNames)(className, {
    link: !(noLinkClass || isTabbarLabel),
    'icon-only': iconOnlyComputed,
    'tab-link': tabLink || tabLink === '',
    'tab-link-active': tabLinkActive,
    'smart-select': smartSelect,
    disabled: disabledLink
  }, (0, _mixins.colorClasses)(props), (0, _mixins.routerClasses)(props), (0, _mixins.actionsClasses)(props));
  var attrs = (0, _extends2.default)({
    href: '#',
    target: linkTarget,
    'data-tab': (0, _utils2.isStringProp)(tabLink) && tabLink || undefined
  }, (0, _mixins.routerAttrs)(props), (0, _mixins.actionsAttrs)(props));

  var handleClick = function handleClick(e) {
    e.preventDefault();
    var options = {};
    var routeProps = props.routeProps,
        reloadCurrent = props.reloadCurrent,
        reloadPrevious = props.reloadPrevious,
        reloadAll = props.reloadAll,
        animate = props.animate,
        ignoreCache = props.ignoreCache,
        transition = props.transition;

    if (routeProps !== undefined) {
      options.props = routeProps;
    }

    if (reloadCurrent !== undefined) {
      options.reloadCurrent = reloadCurrent;
    }

    if (reloadPrevious !== undefined) {
      options.reloadPrevious = reloadPrevious;
    }

    if (reloadAll !== undefined) {
      options.reloadAll = reloadAll;
    }

    if (animate !== undefined) {
      options.animate = animate;
    }

    if (ignoreCache !== undefined) {
      options.ignoreCache = ignoreCache;
    }

    if (transition !== undefined) {
      options.transition = transition;
    }

    _zmp.zmp.views.current.router.navigate(href, options);
  };

  return /*#__PURE__*/_react.default.createElement("a", (0, _extends2.default)({
    ref: elRef,
    id: id,
    style: style,
    className: classes
  }, attrs, extraAttrs, {
    onClick: url && url !== '#' || href && href !== '#' ? handleClick : onClick
  }), iconEl, textEl, children);
});
ZMPLink.displayName = 'zmp-link';
var _default = ZMPLink;
exports.default = _default;