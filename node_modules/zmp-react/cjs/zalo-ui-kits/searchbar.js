"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _searchbar = _interopRequireDefault(require("../components/searchbar"));

var _utils = require("../shared/utils");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/* dts-imports
import { Searchbar } from 'zmp-core/types';
*/

/* dts-props
  id?: string | number;
  className?: string;
  style?: React.CSSProperties;
  noShadow? : boolean
  noHairline? : boolean
  form? : boolean
  placeholder? : string
  disableButton? : boolean
  disableButtonText? : string
  clearButton? : boolean
  value? : string | number | Array<any>
  inputEvents? : string
  expandable? : boolean
  inline? : boolean
  searchContainer? : string | object
  searchIn? : string
  searchItem? : string
  searchGroup? : string
  searchGroupTitle? : string
  foundEl? : string | object
  notFoundEl? : string | object
  backdrop? : boolean
  backdropEl? : string | object
  hideOnEnableEl? : string | object
  hideOnSearchEl? : string | object
  ignore? : string
  customSearch? : boolean
  removeDiacritics? : boolean
  hideDividers? : boolean
  hideGroups? : boolean
  small? : boolean
  disabled?: boolean
  init? : boolean
  COLOR_PROPS
  onSearchbarSearch? : (searchbar?: Searchbar.Searchbar, query?: any, previousQuery?: any) => void
  onSearchbarClear? : (searchbar?: Searchbar.Searchbar, previousQuery?: any) => void
  onSearchbarEnable? : (searchbar?: Searchbar.Searchbar) => void
  onSearchbarDisable? : (searchbar?: Searchbar.Searchbar) => void
  onChange? : (event?: any) => void
  onInput? : (event?: any) => void
  onFocus? : (event?: any) => void
  onBlur? : (event?: any) => void
  onSubmit? : (event?: any) => void
  onClickClear? : (event?: any) => void
  onClickDisable? : (event?: any) => void
  ref?: React.MutableRefObject<{el: HTMLElement | null; zmpSearchbar: () => Searchbar.Searchbar;}>;
  CHILDREN_PROP
*/
var ZMPSearchBar = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var elRef = (0, _react.useRef)(null);
  var small = props.small,
      className = props.className,
      disabled = props.disabled;
  var classes = className;

  if (small) {
    classes = (0, _utils.classNames)(className, 'zmp-searchbar-small');
  }

  if (disabled) {
    classes = (0, _utils.classNames)(classes, 'disabled');
  }

  (0, _react.useImperativeHandle)(ref, function () {
    return elRef.current;
  });
  return /*#__PURE__*/_react.default.createElement(_searchbar.default, (0, _extends2.default)({}, props, {
    ref: elRef,
    className: classes,
    disableButton: false,
    noHairline: true
  }));
});
ZMPSearchBar.displayName = 'zmp-searchbar';
var _default = ZMPSearchBar;
exports.default = _default;