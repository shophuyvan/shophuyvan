"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _navLeft = _interopRequireDefault(require("./nav-left"));

var _navTitle = _interopRequireDefault(require("./nav-title"));

var _navbar = _interopRequireDefault(require("../components/navbar"));

var _utils = require("../shared/utils");

var _constants = require("../../common/constants");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/* dts-props
  id?: string | number;
  className?: string;
  style?: React.CSSProperties;
  backLink? : boolean | string
  backLinkUrl? : string
  backLinkForce? : boolean
  backLinkShowText? : boolean
  sliding? : boolean
  title? : string
  subtitle? : string
  hidden? : boolean
  fill?: boolean
  noShadow? : boolean
  noHairline? : boolean
  innerClass? : string
  innerClassName? : string
  large? : boolean
  largeTransparent? : boolean
  transparent? : boolean
  titleLarge? : string
  COLOR_PROPS
  onNavbarHide? : (...args: any[]) => void
  onNavbarShow? : (...args: any[]) => void
  onNavbarExpand? : (...args: any[]) => void
  onNavbarCollapse? : (...args: any[]) => void
  onNavbarTransparentShow? : (...args: any[]) => void
  onNavbarTransparentHide? : (...args: any[]) => void
  onBackClick? : (event?: any) => void
  onClickBack? : (event?: any) => void
  ref?: React.MutableRefObject<{el: HTMLElement | null}>;
  CHILDREN_PROP
*/
var ZMPNavbar = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var backLink = props.backLink,
      backLinkForce = props.backLinkForce,
      backLinkUrl = props.backLinkUrl,
      backLinkShowText = props.backLinkShowText,
      onBackClick = props.onBackClick,
      fill = props.fill,
      className = props.className,
      title = props.title,
      subtitle = props.subtitle,
      large = props.large;
  var elRef = (0, _react.useRef)(null);
  (0, _react.useEffect)(function () {
    if (large) {
      // eslint-disable-next-line no-restricted-globals
      var root = document.documentElement;
      var height = elRef.current.el ? elRef.current.el.offsetHeight : _constants.DEFAULT_LARGE_NAVBAR_HEIGHT;
      root.style.setProperty('--zmp-navbar-height', height + "px");
    }
  }, []);
  (0, _react.useImperativeHandle)(ref, function () {
    return elRef.current;
  });
  var leftEl;
  var titleEl;

  if (backLink) {
    leftEl = /*#__PURE__*/_react.default.createElement(_navLeft.default, {
      slot: "nav-left",
      backLink: backLink,
      backLinkUrl: backLinkUrl,
      backLinkForce: backLinkForce,
      backLinkShowText: backLinkShowText,
      onBackClick: onBackClick
    });
  }

  if (title || subtitle) {
    titleEl = /*#__PURE__*/_react.default.createElement(_navTitle.default, {
      title: title,
      subtitle: subtitle
    });
  }

  var classes = '';

  if (fill) {
    classes = (0, _utils.classNames)(className, 'zmp-navbar-fill');
  }

  return /*#__PURE__*/_react.default.createElement(_navbar.default, (0, _extends2.default)({
    className: classes || className
  }, props, {
    backLink: false,
    title: false,
    subtitle: false,
    ref: elRef
  }), leftEl, titleEl, props.children);
});
ZMPNavbar.displayName = 'zmp-navbar';
var _default = ZMPNavbar;
exports.default = _default;