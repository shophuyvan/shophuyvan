"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _useIsomorphicLayoutEffect = require("../shared/use-isomorphic-layout-effect");

var _utils = require("../shared/utils");

var _mixins = require("../shared/mixins");

var _zmp = require("../shared/zmp");

var _useTab = require("../shared/use-tab");

var _routerContext = require("../shared/router-context");

var _useAsyncComponent = require("../shared/use-async-component");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var Tab = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var className = props.className,
      id = props.id,
      style = props.style,
      children = props.children,
      tabActive = props.tabActive;
  var extraAttrs = (0, _utils.getExtraAttrs)(props);
  var elRef = (0, _react.useRef)(null);
  var routerData = (0, _react.useRef)(null);
  var routerContext = (0, _react.useContext)(_routerContext.RouterContext);
  var initialTabContent = null;

  if (!routerData.current && routerContext && routerContext.route && routerContext.route.route && routerContext.route.route.tab && routerContext.route.route.tab.id === id) {
    var _routerContext$route$ = routerContext.route.route.tab,
        component = _routerContext$route$.component,
        asyncComponent = _routerContext$route$.asyncComponent;

    if (component || asyncComponent) {
      initialTabContent = {
        id: (0, _utils.getComponentId)(),
        component: component || asyncComponent,
        isAsync: !!asyncComponent,
        props: (0, _extends2.default)({
          zmprouter: routerContext.router,
          zmproute: routerContext.route
        }, routerContext.route.params)
      };
    }
  }

  var _useState = (0, _react.useState)(initialTabContent || null),
      tabContent = _useState[0],
      setTabContent = _useState[1];

  (0, _react.useImperativeHandle)(ref, function () {
    return {
      el: elRef.current
    };
  });

  if (_zmp.zmp && !routerData.current) {
    routerData.current = {
      setTabContent: setTabContent
    };

    _zmp.zmprouters.tabs.push(routerData.current);
  }

  var onMount = function onMount() {
    if (elRef.current && initialTabContent) {
      elRef.current.zmpRouterTabLoaded = true;
    }

    (0, _zmp.zmpready)(function () {
      if (!routerData.current) {
        routerData.current = {
          el: elRef.current,
          setTabContent: setTabContent
        };

        _zmp.zmprouters.tabs.push(routerData.current);
      } else {
        routerData.current.el = elRef.current;
      }
    });
  };

  var onDestroy = function onDestroy() {
    if (!routerData.current) return;

    _zmp.zmprouters.tabs.splice(_zmp.zmprouters.tabs.indexOf(routerData.current), 1);

    routerData.current = null;
  };

  (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(function () {
    onMount();
    return onDestroy;
  }, []);
  (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(function () {
    if (!routerData.current || !_zmp.zmp) return;

    _zmp.zmpevents.emit('tabRouterDidUpdate', routerData.current);
  });
  (0, _useTab.useTab)(elRef, props);
  var classes = (0, _utils.classNames)(className, 'tab', {
    'tab-active': tabActive
  }, (0, _mixins.colorClasses)(props));

  var renderChildren = function renderChildren() {
    if (!tabContent) return children;

    if (tabContent.isAsync) {
      return (0, _useAsyncComponent.useAsyncComponent)(tabContent.component, tabContent.props, tabContent.id);
    }

    var TabContent = tabContent.component;
    return /*#__PURE__*/_react.default.createElement(TabContent, (0, _extends2.default)({
      key: tabContent.id
    }, tabContent.props));
  };

  return /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({
    id: id,
    style: style,
    className: classes,
    ref: elRef
  }, extraAttrs), renderChildren());
});
Tab.displayName = 'zmp-tab';
var _default = Tab;
exports.default = _default;