"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _useIsomorphicLayoutEffect = require("../shared/use-isomorphic-layout-effect");

var _utils = require("../shared/utils");

var _mixins = require("../shared/mixins");

var _zmp = require("../shared/zmp");

var _watchProp = require("../shared/watch-prop");

var _useTooltip = require("../shared/use-tooltip");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var Toggle = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var _zmpToggle = (0, _react.useRef)(null);

  var className = props.className,
      id = props.id,
      style = props.style,
      _props$init = props.init,
      init = _props$init === void 0 ? true : _props$init,
      checked = props.checked,
      defaultChecked = props.defaultChecked,
      disabled = props.disabled,
      readonly = props.readonly,
      name = props.name,
      value = props.value;
  var extraAttrs = (0, _utils.getExtraAttrs)(props);
  var elRef = (0, _react.useRef)(null);

  var onChange = function onChange(event) {
    (0, _utils.emit)(props, 'change', event);
  };

  (0, _react.useImperativeHandle)(ref, function () {
    return {
      el: elRef.current,
      zmpToggle: function zmpToggle() {
        return _zmpToggle.current;
      }
    };
  });
  (0, _useTooltip.useTooltip)(elRef, props);
  (0, _watchProp.watchProp)(checked, function (newValue) {
    if (!_zmpToggle.current) return;
    _zmpToggle.current.checked = newValue;
  });

  var onMount = function onMount() {
    (0, _zmp.zmpready)(function () {
      if (!init || !elRef.current) return;
      _zmpToggle.current = _zmp.zmp.toggle.create({
        el: elRef.current,
        on: {
          change: function change(toggleInstance) {
            (0, _utils.emit)(props, 'toggleChange', toggleInstance.checked);
          }
        }
      });
    });
  };

  var onDestroy = function onDestroy() {
    if (_zmpToggle.current && _zmpToggle.current.destroy && _zmpToggle.current.$el) {
      _zmpToggle.current.destroy();
    }

    _zmpToggle.current = null;
  };

  (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(function () {
    onMount();
    return onDestroy;
  }, []);
  var labelClasses = (0, _utils.classNames)('toggle', className, {
    disabled: disabled
  }, (0, _mixins.colorClasses)(props));

  var inputEl = /*#__PURE__*/_react.default.createElement("input", {
    type: "checkbox",
    name: name,
    disabled: disabled,
    readOnly: readonly,
    checked: checked,
    defaultChecked: defaultChecked,
    value: value,
    onChange: onChange
  });

  return /*#__PURE__*/_react.default.createElement("label", (0, _extends2.default)({
    id: id,
    style: style,
    className: labelClasses,
    ref: elRef
  }, extraAttrs), inputEl, /*#__PURE__*/_react.default.createElement("span", {
    className: "toggle-icon"
  }));
});
Toggle.displayName = 'zmp-toggle';
var _default = Toggle;
exports.default = _default;