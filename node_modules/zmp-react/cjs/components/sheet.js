"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _useIsomorphicLayoutEffect = require("../shared/use-isomorphic-layout-effect");

var _utils = require("../shared/utils");

var _mixins = require("../shared/mixins");

var _zmp = require("../shared/zmp");

var _watchProp = require("../shared/watch-prop");

var _modalStateClasses = require("../shared/modal-state-classes");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }


var Sheet = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var _zmpSheet = (0, _react.useRef)(null);

  var className = props.className,
      id = props.id,
      style = props.style,
      top = props.top,
      bottom = props.bottom,
      position = props.position,
      push = props.push,
      opened = props.opened,
      animate = props.animate,
      backdrop = props.backdrop,
      backdropEl = props.backdropEl,
      closeByBackdropClick = props.closeByBackdropClick,
      closeByOutsideClick = props.closeByOutsideClick,
      closeOnEscape = props.closeOnEscape,
      swipeToClose = props.swipeToClose,
      swipeToStep = props.swipeToStep,
      swipeHandler = props.swipeHandler,
      containerEl = props.containerEl,
      color = props.color,
      colorTheme = props.colorTheme,
      textColor = props.textColor,
      bgColor = props.bgColor,
      borderColor = props.borderColor,
      rippleColor = props.rippleColor,
      themeDark = props.themeDark;
  var extraAttrs = (0, _utils.getExtraAttrs)(props);
  var elRef = (0, _react.useRef)(null);
  var isOpened = (0, _react.useRef)(opened);
  var isClosing = (0, _react.useRef)(false);

  var onStepProgress = function onStepProgress(instance, progress) {
    (0, _utils.emit)(props, 'sheetStepProgress', instance, progress);
  };

  var onStepOpen = function onStepOpen(instance) {
    (0, _utils.emit)(props, 'sheetStepOpen', instance);
  };

  var onStepClose = function onStepClose(instance) {
    (0, _utils.emit)(props, 'sheetStepClose', instance);
  };

  var onOpen = function onOpen(instance) {
    isOpened.current = true;
    isClosing.current = false;
    (0, _utils.emit)(props, 'sheetOpen', instance);
  };

  var onOpened = function onOpened(instance) {
    (0, _utils.emit)(props, 'sheetOpened', instance);
  };

  var onClose = function onClose(instance) {
    isOpened.current = false;
    isClosing.current = true;
    (0, _utils.emit)(props, 'sheetClose', instance);
  };

  var onClosed = function onClosed(instance) {
    isClosing.current = false;
    (0, _utils.emit)(props, 'sheetClosed', instance);
  };

  (0, _react.useImperativeHandle)(ref, function () {
    return {
      el: elRef.current,
      zmpSheet: function zmpSheet() {
        return _zmpSheet.current;
      }
    };
  });

  var modalEvents = function modalEvents(method) {
    if (!_zmpSheet.current) return;

    _zmpSheet.current[method]('open', onOpen);

    _zmpSheet.current[method]('opened', onOpened);

    _zmpSheet.current[method]('close', onClose);

    _zmpSheet.current[method]('closed', onClosed);

    _zmpSheet.current[method]('stepOpen', onStepOpen);

    _zmpSheet.current[method]('stepClose', onStepClose);

    _zmpSheet.current[method]('stepProgress', onStepProgress);
  };

  var onMount = function onMount() {
    if (!elRef.current) return;
    var sheetParams = {
      el: elRef.current
    };
    if ('animate' in props && typeof animate !== 'undefined') sheetParams.animate = animate;
    if ('backdrop' in props && typeof backdrop !== 'undefined') sheetParams.backdrop = backdrop;
    if ('backdropEl' in props) sheetParams.backdropEl = backdropEl;
    if ('closeByBackdropClick' in props) sheetParams.closeByBackdropClick = closeByBackdropClick;
    if ('closeByOutsideClick' in props) sheetParams.closeByOutsideClick = closeByOutsideClick;
    if ('closeOnEscape' in props) sheetParams.closeOnEscape = closeOnEscape;
    if ('swipeToClose' in props) sheetParams.swipeToClose = swipeToClose;
    if ('swipeToStep' in props) sheetParams.swipeToStep = swipeToStep;
    if ('swipeHandler' in props) sheetParams.swipeHandler = swipeHandler;
    if ('containerEl' in props) sheetParams.containerEl = containerEl;
    (0, _zmp.zmpready)(function () {
      _zmpSheet.current = _zmp.zmp.sheet.create(sheetParams);
      modalEvents('on');

      if (opened) {
        _zmpSheet.current.open(false);
      }
    });
  };

  var onDestroy = function onDestroy() {
    if (_zmpSheet.current) {
      if (_zmpSheet.current.opened) {
        _zmpSheet.current.close();
      } else {
        _zmpSheet.current.destroy();
      }

      _zmpSheet.current = null;
    }
  };

  (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(function () {
    modalEvents('on');
    return function () {
      modalEvents('off');
    };
  });
  (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(function () {
    onMount();
    return onDestroy;
  }, []);
  (0, _watchProp.watchProp)(opened, function (value) {
    if (!_zmpSheet.current) return;

    if (value) {
      _zmpSheet.current.open();
    } else {
      _zmpSheet.current.close();
    }
  });
  var slots = (0, _utils.getSlots)(props);
  var fixedList = [];
  var staticList = [];
  var fixedTags = 'navbar toolbar tabbar subnavbar searchbar messagebar fab list-index panel'.split(' ').map(function (tagName) {
    return "zmp-" + tagName;
  });
  var slotsDefault = slots.default;

  if (slotsDefault && slotsDefault.length) {
    slotsDefault.forEach(function (child) {
      if (typeof child === 'undefined') return;
      var isFixedTag = false;
      var tag = child.type && (child.type.displayName || child.type.name);

      if (!tag) {
        staticList.push(child);
        return;
      }

      if (fixedTags.indexOf(tag) >= 0) {
        isFixedTag = true;
      }

      if (isFixedTag) fixedList.push(child);else staticList.push(child);
    });
  }

  var innerEl = /*#__PURE__*/_react.default.createElement("div", {
    className: "sheet-modal-inner"
  }, staticList, slots.static);

  var positionComputed = 'bottom';
  if (position) positionComputed = position;else if (top) positionComputed = 'top';else if (bottom) positionComputed = 'bottom';
  var classes = (0, _react.useMemo)(function () {
    return (0, _utils.classNames)(className, 'sheet-modal', "sheet-modal-" + positionComputed, {
      'sheet-modal-push': push
    }, (0, _modalStateClasses.modalStateClasses)({
      isOpened: isOpened,
      isClosing: isClosing
    }), (0, _mixins.colorClasses)(props));
  }, [isOpened, isClosing, className, push, positionComputed, color, colorTheme, textColor, bgColor, borderColor, rippleColor, themeDark]);
  return /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({
    id: id,
    style: style,
    className: classes,
    ref: elRef
  }, extraAttrs), fixedList, slots.fixed, innerEl);
});
Sheet.displayName = 'zmp-sheet';
var _default = Sheet;
exports.default = _default;