"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _useIsomorphicLayoutEffect = require("../shared/use-isomorphic-layout-effect");

var _utils = require("../shared/utils");

var _mixins = require("../shared/mixins");

var _zmp = require("../shared/zmp");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var AccordionItem = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var className = props.className,
      id = props.id,
      style = props.style,
      children = props.children,
      opened = props.opened;
  var elRef = (0, _react.useRef)(null);
  (0, _react.useImperativeHandle)(ref, function () {
    return {
      el: elRef.current
    };
  });

  var onBeforeOpen = function onBeforeOpen(el, prevent) {
    if (elRef.current !== el) return;
    (0, _utils.emit)(props, 'accordionBeforeOpen', prevent);
  };

  var onOpen = function onOpen(el) {
    if (elRef.current !== el) return;
    (0, _utils.emit)(props, 'accordionOpen');
  };

  var onOpened = function onOpened(el) {
    if (elRef.current !== el) return;
    (0, _utils.emit)(props, 'accordionOpened');
  };

  var onBeforeClose = function onBeforeClose(el, prevent) {
    if (elRef.current !== el) return;
    (0, _utils.emit)(props, 'accordionBeforeClose', prevent);
  };

  var onClose = function onClose(el) {
    if (elRef.current !== el) return;
    (0, _utils.emit)(props, 'accordionClose');
  };

  var onClosed = function onClosed(el) {
    if (elRef.current !== el) return;
    (0, _utils.emit)(props, 'accordionClosed');
  };

  var attachEvents = function attachEvents() {
    (0, _zmp.zmpready)(function () {
      _zmp.zmp.on('accordionBeforeOpen', onBeforeOpen);

      _zmp.zmp.on('accordionOpen', onOpen);

      _zmp.zmp.on('accordionOpened', onOpened);

      _zmp.zmp.on('accordionBeforeClose', onBeforeClose);

      _zmp.zmp.on('accordionClose', onClose);

      _zmp.zmp.on('accordionClosed', onClosed);
    });
  };

  var detachEvents = function detachEvents() {
    _zmp.zmp.off('accordionBeforeOpen', onBeforeOpen);

    _zmp.zmp.off('accordionOpen', onOpen);

    _zmp.zmp.off('accordionOpened', onOpened);

    _zmp.zmp.off('accordionBeforeClose', onBeforeClose);

    _zmp.zmp.off('accordionClose', onClose);

    _zmp.zmp.off('accordionClosed', onClosed);
  };

  (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(function () {
    attachEvents();
    return detachEvents;
  });
  var extraAttrs = (0, _utils.getExtraAttrs)(props);
  var classes = (0, _utils.classNames)(className, 'accordion-item', {
    'accordion-item-opened': opened
  }, (0, _mixins.colorClasses)(props));
  return /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({
    id: id,
    style: style,
    className: classes,
    ref: elRef
  }, extraAttrs), children);
});
AccordionItem.displayName = 'zmp-accordion-item';
var _default = AccordionItem;
exports.default = _default;