"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _useIsomorphicLayoutEffect = require("../shared/use-isomorphic-layout-effect");

var _utils = require("../shared/utils");

var _mixins = require("../shared/mixins");

var _zmp = require("../shared/zmp");

var _watchProp = require("../shared/watch-prop");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var Panel = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var _classNames;

  var _zmpPanel = (0, _react.useRef)(null);

  var className = props.className,
      id = props.id,
      style = props.style,
      children = props.children,
      side = props.side,
      effect = props.effect,
      reveal = props.reveal,
      left = props.left,
      opened = props.opened,
      resizable = props.resizable,
      _props$backdrop = props.backdrop,
      backdrop = _props$backdrop === void 0 ? true : _props$backdrop,
      backdropEl = props.backdropEl,
      containerEl = props.containerEl,
      visibleBreakpoint = props.visibleBreakpoint,
      collapsedBreakpoint = props.collapsedBreakpoint,
      swipe = props.swipe,
      swipeNoFollow = props.swipeNoFollow,
      swipeOnlyClose = props.swipeOnlyClose,
      _props$swipeActiveAre = props.swipeActiveArea,
      swipeActiveArea = _props$swipeActiveAre === void 0 ? 0 : _props$swipeActiveAre,
      _props$swipeThreshold = props.swipeThreshold,
      swipeThreshold = _props$swipeThreshold === void 0 ? 0 : _props$swipeThreshold;
  var extraAttrs = (0, _utils.getExtraAttrs)(props);
  var elRef = (0, _react.useRef)(null);
  var isOpened = (0, _react.useRef)(false);
  var isClosing = (0, _react.useRef)(false);
  var isCollapsed = (0, _react.useRef)(false);
  var isBreakpoint = (0, _react.useRef)(false);

  var onOpen = function onOpen(event) {
    isOpened.current = true;
    isClosing.current = false;
    (0, _utils.emit)(props, 'panelOpen', event);
  };

  var onOpened = function onOpened(event) {
    (0, _utils.emit)(props, 'panelOpened', event);
  };

  var onClose = function onClose(event) {
    isOpened.current = false;
    isClosing.current = true;
    (0, _utils.emit)(props, 'panelClose', event);
  };

  var onClosed = function onClosed(event) {
    isClosing.current = false;
    (0, _utils.emit)(props, 'panelClosed', event);
  };

  var onBackdropClick = function onBackdropClick(event) {
    (0, _utils.emit)(props, 'click panelBackdropClick', event);
  };

  var onSwipe = function onSwipe(event) {
    (0, _utils.emit)(props, 'panelSwipe', event);
  };

  var onSwipeOpen = function onSwipeOpen(event) {
    (0, _utils.emit)(props, 'panelSwipeOpen', event);
  };

  var onBreakpoint = function onBreakpoint(event) {
    isBreakpoint.current = true;
    isCollapsed.current = false;
    (0, _utils.emit)(props, 'panelBreakpoint', event);
  };

  var onCollapsedBreakpoint = function onCollapsedBreakpoint(event) {
    isBreakpoint.current = false;
    isCollapsed.current = true;
    (0, _utils.emit)(props, 'panelCollapsedBreakpoint', event);
  };

  var onResize = function onResize() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _utils.emit.apply(void 0, [props, 'panelResize'].concat(args));
  };

  (0, _react.useImperativeHandle)(ref, function () {
    return {
      el: elRef.current,
      zmpPanel: function zmpPanel() {
        return _zmpPanel.current;
      }
    };
  });
  (0, _watchProp.watchProp)(resizable, function (newValue) {
    if (!_zmpPanel.current) return;
    if (newValue) _zmpPanel.current.enableResizable();else _zmpPanel.current.disableResizable();
  });
  (0, _watchProp.watchProp)(opened, function (newValue) {
    if (!_zmpPanel.current) return;

    if (newValue) {
      _zmpPanel.current.open();
    } else {
      _zmpPanel.current.close();
    }
  });

  var onMount = function onMount() {
    (0, _zmp.zmpready)(function () {
      var $ = _zmp.zmp.$;
      if (!$) return;

      if ($('.panel-backdrop').length === 0) {
        $('<div class="panel-backdrop"></div>').insertBefore(elRef.current);
      }

      var params = (0, _utils.noUndefinedProps)({
        el: elRef.current,
        resizable: resizable,
        backdrop: backdrop,
        backdropEl: backdropEl,
        containerEl: containerEl,
        visibleBreakpoint: visibleBreakpoint,
        collapsedBreakpoint: collapsedBreakpoint,
        swipe: swipe,
        swipeNoFollow: swipeNoFollow,
        swipeOnlyClose: swipeOnlyClose,
        swipeActiveArea: swipeActiveArea,
        swipeThreshold: swipeThreshold,
        on: {
          open: onOpen,
          opened: onOpened,
          close: onClose,
          closed: onClosed,
          backdropClick: onBackdropClick,
          swipe: onSwipe,
          swipeOpen: onSwipeOpen,
          collapsedBreakpoint: onCollapsedBreakpoint,
          breakpoint: onBreakpoint,
          resize: onResize
        }
      });
      _zmpPanel.current = _zmp.zmp.panel.create(params);

      if (opened) {
        _zmpPanel.current.open(false);
      }
    });
  };

  var onDestroy = function onDestroy() {
    if (_zmpPanel.current && _zmpPanel.current.destroy) {
      _zmpPanel.current.destroy();
    }

    _zmpPanel.current = null;
  };

  (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(function () {
    onMount();
    return onDestroy;
  }, []);
  var sideComputed = side || (left ? 'left' : 'right');
  var effectComputed = effect || (reveal ? 'reveal' : 'cover');
  var classes = (0, _utils.classNames)(className, 'panel', (_classNames = {
    'panel-in': isOpened.current && !isClosing.current && !isBreakpoint.current,
    'panel-in-breakpoint': isBreakpoint.current,
    'panel-in-collapsed': isCollapsed.current,
    'panel-resizable': resizable
  }, _classNames["panel-" + sideComputed] = sideComputed, _classNames["panel-" + effectComputed] = effectComputed, _classNames), (0, _mixins.colorClasses)(props));
  return /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({
    id: id,
    style: style,
    className: classes,
    ref: elRef
  }, extraAttrs), children, resizable && /*#__PURE__*/_react.default.createElement("div", {
    className: "panel-resize-handler"
  }));
});
Panel.displayName = 'zmp-panel';
var _default = Panel;
exports.default = _default;