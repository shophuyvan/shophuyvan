"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _useIsomorphicLayoutEffect = require("../shared/use-isomorphic-layout-effect");

var _utils = require("../shared/utils");

var _mixins = require("../shared/mixins");

var _zmp = require("../shared/zmp");

var _watchProp = require("../shared/watch-prop");

var _modalStateClasses = require("../shared/modal-state-classes");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }


var Popup = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var _zmpPopup = (0, _react.useRef)(null);

  var className = props.className,
      id = props.id,
      style = props.style,
      children = props.children,
      tabletFullscreen = props.tabletFullscreen,
      push = props.push,
      opened = props.opened,
      closeByBackdropClick = props.closeByBackdropClick,
      backdrop = props.backdrop,
      backdropEl = props.backdropEl,
      animate = props.animate,
      closeOnEscape = props.closeOnEscape,
      _props$swipeToClose = props.swipeToClose,
      swipeToClose = _props$swipeToClose === void 0 ? false : _props$swipeToClose,
      swipeHandler = props.swipeHandler,
      containerEl = props.containerEl;
  var extraAttrs = (0, _utils.getExtraAttrs)(props);
  var elRef = (0, _react.useRef)(null);
  var isOpened = (0, _react.useRef)(opened);
  var isClosing = (0, _react.useRef)(false);

  var onSwipeStart = function onSwipeStart(instance) {
    (0, _utils.emit)(props, 'popupSwipeStart', instance);
  };

  var onSwipeMove = function onSwipeMove(instance) {
    (0, _utils.emit)(props, 'popupSwipeMove', instance);
  };

  var onSwipeEnd = function onSwipeEnd(instance) {
    (0, _utils.emit)(props, 'popupSwipeEnd', instance);
  };

  var onSwipeClose = function onSwipeClose(instance) {
    (0, _utils.emit)(props, 'popupSwipeClose', instance);
  };

  var onOpen = function onOpen(instance) {
    isOpened.current = true;
    isClosing.current = false;
    (0, _utils.emit)(props, 'popupOpen', instance);
  };

  var onOpened = function onOpened(instance) {
    (0, _utils.emit)(props, 'popupOpened', instance);
  };

  var onClose = function onClose(instance) {
    isOpened.current = false;
    isClosing.current = true;
    (0, _utils.emit)(props, 'popupClose', instance);
  };

  var onClosed = function onClosed(instance) {
    isClosing.current = false;
    (0, _utils.emit)(props, 'popupClosed', instance);
  };

  (0, _react.useImperativeHandle)(ref, function () {
    return {
      el: elRef.current,
      zmpPopup: function zmpPopup() {
        return _zmpPopup.current;
      }
    };
  });
  (0, _watchProp.watchProp)(opened, function (value) {
    if (!_zmpPopup.current) return;

    if (value) {
      _zmpPopup.current.open();
    } else {
      _zmpPopup.current.close();
    }
  });

  var onMount = function onMount() {
    if (!elRef.current) return;
    var popupParams = {
      el: elRef.current,
      on: {
        swipeStart: onSwipeStart,
        swipeMove: onSwipeMove,
        swipeEnd: onSwipeEnd,
        swipeClose: onSwipeClose,
        open: onOpen,
        opened: onOpened,
        close: onClose,
        closed: onClosed
      }
    };
    if ('closeByBackdropClick' in props) popupParams.closeByBackdropClick = closeByBackdropClick;
    if ('closeOnEscape' in props) popupParams.closeOnEscape = closeOnEscape;
    if ('animate' in props) popupParams.animate = animate;
    if ('backdrop' in props) popupParams.backdrop = backdrop;
    if ('backdropEl' in props) popupParams.backdropEl = backdropEl;
    if ('swipeToClose' in props) popupParams.swipeToClose = swipeToClose;
    if ('swipeHandler' in props) popupParams.swipeHandler = swipeHandler;
    if ('containerEl' in props) popupParams.containerEl = containerEl;
    (0, _zmp.zmpready)(function () {
      _zmpPopup.current = _zmp.zmp.popup.create(popupParams);

      if (opened) {
        _zmpPopup.current.open(false);
      }
    });
  };

  var onDestroy = function onDestroy() {
    if (_zmpPopup.current) {
      _zmpPopup.current.destroy();
    }

    _zmpPopup.current = null;
  };

  (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(function () {
    onMount();
    return onDestroy;
  }, []);
  var classes = (0, _utils.classNames)(className, 'popup', {
    'popup-tablet-fullscreen': tabletFullscreen,
    'popup-push': push
  }, (0, _modalStateClasses.modalStateClasses)({
    isOpened: isOpened,
    isClosing: isClosing
  }), (0, _mixins.colorClasses)(props));
  return /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({
    id: id,
    style: style,
    className: classes,
    ref: elRef
  }, extraAttrs), children);
});
Popup.displayName = 'zmp-popup';
var _default = Popup;
exports.default = _default;