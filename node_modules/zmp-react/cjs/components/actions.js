"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _useIsomorphicLayoutEffect = require("../shared/use-isomorphic-layout-effect");

var _utils = require("../shared/utils");

var _mixins = require("../shared/mixins");

var _zmp = require("../shared/zmp");

var _watchProp = require("../shared/watch-prop");

var _modalStateClasses = require("../shared/modal-state-classes");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }


var Actions = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var className = props.className,
      id = props.id,
      style = props.style,
      children = props.children,
      grid = props.grid,
      _props$opened = props.opened,
      opened = _props$opened === void 0 ? false : _props$opened,
      animate = props.animate;
  var extraAttrs = (0, _utils.getExtraAttrs)(props);
  var elRef = (0, _react.useRef)(null);
  var isOpened = (0, _react.useRef)(opened);
  var isClosing = (0, _react.useRef)(false);

  var _zmpActions = (0, _react.useRef)(null);

  var onOpen = function onOpen(instance) {
    isOpened.current = true;
    isClosing.current = false;
    (0, _utils.emit)(props, 'actionsOpen', instance);
  };

  var onOpened = function onOpened(instance) {
    (0, _utils.emit)(props, 'actionsOpened', instance);
  };

  var onClose = function onClose(instance) {
    isOpened.current = false;
    isClosing.current = true;
    (0, _utils.emit)(props, 'actionsClose', instance);
  };

  var onClosed = function onClosed(instance) {
    isClosing.current = false;
    (0, _utils.emit)(props, 'actionsClosed', instance);
  };

  (0, _react.useImperativeHandle)(ref, function () {
    return {
      el: elRef.current,
      zmpActions: function zmpActions() {
        return _zmpActions.current;
      }
    };
  }); // watch opened changes

  (0, _watchProp.watchProp)(opened, function (value) {
    if (!_zmpActions.current) return;

    if (value) {
      _zmpActions.current.open();
    } else {
      _zmpActions.current.close();
    }
  });

  var onMount = function onMount() {
    if (!elRef.current) return;
    var target = props.target,
        convertToPopover = props.convertToPopover,
        forceToPopover = props.forceToPopover,
        closeByBackdropClick = props.closeByBackdropClick,
        closeByOutsideClick = props.closeByOutsideClick,
        closeOnEscape = props.closeOnEscape,
        backdrop = props.backdrop,
        backdropEl = props.backdropEl,
        containerEl = props.containerEl;
    var params = {
      el: elRef.current,
      grid: grid,
      on: {
        open: onOpen,
        opened: onOpened,
        close: onClose,
        closed: onClosed
      }
    };
    if (target) params.targetEl = target;
    if ('convertToPopover' in props) params.convertToPopover = convertToPopover;
    if ('forceToPopover' in props) params.forceToPopover = forceToPopover;
    if ('backdrop' in props) params.backdrop = backdrop;
    if ('backdropEl' in props) params.backdropEl = backdropEl;
    if ('closeByBackdropClick' in props) params.closeByBackdropClick = closeByBackdropClick;
    if ('closeByOutsideClick' in props) params.closeByOutsideClick = closeByOutsideClick;
    if ('closeOnEscape' in props) params.closeOnEscape = closeOnEscape;
    if ('animate' in props) params.animate = animate;
    if ('containerEl' in props) params.containerEl = containerEl;
    (0, _zmp.zmpready)(function () {
      _zmpActions.current = _zmp.zmp.actions.create(params);

      if (opened) {
        _zmpActions.current.open(false);
      }
    });
  };

  var onDestroy = function onDestroy() {
    if (_zmpActions.current) {
      if (_zmpActions.current.opened) {
        _zmpActions.current.close();
      } else {
        _zmpActions.current.destroy();
      }
    }

    _zmpActions.current = null;
  };

  (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(function () {
    onMount();
    return onDestroy;
  }, []);
  var classes = (0, _utils.classNames)(className, 'actions-modal', {
    'actions-grid': grid
  }, (0, _modalStateClasses.modalStateClasses)({
    isOpened: isOpened,
    isClosing: isClosing
  }), (0, _mixins.colorClasses)(props));
  return /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({
    id: id,
    style: style,
    className: classes,
    ref: elRef
  }, extraAttrs), children);
});
Actions.displayName = 'zmp-actions';
var _default = Actions;
exports.default = _default;