"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _useIsomorphicLayoutEffect = require("../shared/use-isomorphic-layout-effect");

var _utils = require("../shared/utils");

var _mixins = require("../shared/mixins");

var _zmp = require("../shared/zmp");

var _watchProp = require("../shared/watch-prop");

var _modalStateClasses = require("../shared/modal-state-classes");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }


var Popover = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var _zmpPopover = (0, _react.useRef)(null);

  var className = props.className,
      id = props.id,
      style = props.style,
      children = props.children,
      opened = props.opened,
      animate = props.animate,
      targetEl = props.targetEl,
      backdrop = props.backdrop,
      backdropEl = props.backdropEl,
      closeByBackdropClick = props.closeByBackdropClick,
      closeByOutsideClick = props.closeByOutsideClick,
      closeOnEscape = props.closeOnEscape,
      containerEl = props.containerEl;
  var extraAttrs = (0, _utils.getExtraAttrs)(props);
  var elRef = (0, _react.useRef)(null);
  var isOpened = (0, _react.useRef)(opened);
  var isClosing = (0, _react.useRef)(false);

  var onOpen = function onOpen(instance) {
    isOpened.current = true;
    isClosing.current = false;
    (0, _utils.emit)(props, 'popoverOpen', instance);
  };

  var onOpened = function onOpened(instance) {
    (0, _utils.emit)(props, 'popoverOpened', instance);
  };

  var onClose = function onClose(instance) {
    isOpened.current = false;
    isClosing.current = true;
    (0, _utils.emit)(props, 'popoverClose', instance);
  };

  var onClosed = function onClosed(instance) {
    isClosing.current = false;
    (0, _utils.emit)(props, 'popoverClosed', instance);
  };

  (0, _react.useImperativeHandle)(ref, function () {
    return {
      el: elRef.current,
      zmpPopover: function zmpPopover() {
        return _zmpPopover.current;
      }
    };
  });
  (0, _watchProp.watchProp)(opened, function (value) {
    if (!_zmpPopover.current) return;

    if (value) {
      _zmpPopover.current.open();
    } else {
      _zmpPopover.current.close();
    }
  });

  var onMount = function onMount() {
    if (!elRef.current) return;
    var popoverParams = {
      el: elRef.current,
      on: {
        open: onOpen,
        opened: onOpened,
        close: onClose,
        closed: onClosed
      }
    };
    if (targetEl) popoverParams.targetEl = targetEl;
    if ('closeByBackdropClick' in props) popoverParams.closeByBackdropClick = closeByBackdropClick;
    if ('closeByOutsideClick' in props) popoverParams.closeByOutsideClick = closeByOutsideClick;
    if ('closeOnEscape' in props) popoverParams.closeOnEscape = closeOnEscape;
    if ('backdrop' in props) popoverParams.backdrop = backdrop;
    if ('backdropEl' in props) popoverParams.backdropEl = backdropEl;
    if ('animate' in props) popoverParams.animate = animate;
    if ('containerEl' in props) popoverParams.containerEl = containerEl;
    (0, _zmp.zmpready)(function () {
      _zmpPopover.current = _zmp.zmp.popover.create(popoverParams);

      if (opened && targetEl) {
        _zmpPopover.current.open(targetEl, false);
      }
    });
  };

  var onDestroy = function onDestroy() {
    if (_zmpPopover.current) {
      _zmpPopover.current.destroy();
    }

    _zmpPopover.current = null;
  };

  (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(function () {
    onMount();
    return onDestroy;
  }, []);
  var classes = (0, _utils.classNames)(className, 'popover', (0, _modalStateClasses.modalStateClasses)({
    isOpened: isOpened,
    isClosing: isClosing
  }), (0, _mixins.colorClasses)(props));
  return /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({
    id: id,
    style: style,
    className: classes,
    ref: elRef
  }, extraAttrs), /*#__PURE__*/_react.default.createElement("div", {
    className: "popover-angle"
  }), /*#__PURE__*/_react.default.createElement("div", {
    className: "popover-inner"
  }, children));
});
Popover.displayName = 'zmp-popover';
var _default = Popover;
exports.default = _default;