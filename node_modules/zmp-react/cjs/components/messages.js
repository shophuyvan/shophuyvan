"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireWildcard(require("react"));

var _useIsomorphicLayoutEffect = require("../shared/use-isomorphic-layout-effect");

var _utils = require("../shared/utils");

var _mixins = require("../shared/mixins");

var _zmp = require("../shared/zmp");

var _watchProp = require("../shared/watch-prop");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var Messages = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var _zmpMessages = (0, _react.useRef)(null);

  var mounted = (0, _react.useRef)(false);
  var className = props.className,
      id = props.id,
      style = props.style,
      children = props.children,
      _props$autoLayout = props.autoLayout,
      autoLayout = _props$autoLayout === void 0 ? false : _props$autoLayout,
      _props$messages = props.messages,
      messages = _props$messages === void 0 ? [] : _props$messages,
      _props$newMessagesFir = props.newMessagesFirst,
      newMessagesFirst = _props$newMessagesFir === void 0 ? false : _props$newMessagesFir,
      _props$scrollMessages = props.scrollMessages,
      scrollMessages = _props$scrollMessages === void 0 ? true : _props$scrollMessages,
      _props$scrollMessages2 = props.scrollMessagesOnEdge,
      scrollMessagesOnEdge = _props$scrollMessages2 === void 0 ? true : _props$scrollMessages2,
      firstMessageRule = props.firstMessageRule,
      lastMessageRule = props.lastMessageRule,
      tailMessageRule = props.tailMessageRule,
      sameNameMessageRule = props.sameNameMessageRule,
      sameHeaderMessageRule = props.sameHeaderMessageRule,
      sameFooterMessageRule = props.sameFooterMessageRule,
      sameAvatarMessageRule = props.sameAvatarMessageRule,
      customClassMessageRule = props.customClassMessageRule,
      renderMessage = props.renderMessage,
      _props$typing = props.typing,
      typing = _props$typing === void 0 ? false : _props$typing,
      _props$init = props.init,
      init = _props$init === void 0 ? true : _props$init;
  var extraAttrs = (0, _utils.getExtraAttrs)(props);
  var elRef = (0, _react.useRef)(null);
  var childrenBeforeUpdated = (0, _react.useRef)(null);
  (0, _react.useImperativeHandle)(ref, function () {
    return {
      el: elRef.current,
      zmpMessages: function zmpMessages() {
        return _zmpMessages.current;
      }
    };
  });

  var onMount = function onMount() {
    if (!init) return;
    (0, _zmp.zmpready)(function () {
      _zmpMessages.current = _zmp.zmp.messages.create((0, _utils.noUndefinedProps)({
        el: elRef.current,
        autoLayout: autoLayout,
        messages: messages,
        newMessagesFirst: newMessagesFirst,
        scrollMessages: scrollMessages,
        scrollMessagesOnEdge: scrollMessagesOnEdge,
        firstMessageRule: firstMessageRule,
        lastMessageRule: lastMessageRule,
        tailMessageRule: tailMessageRule,
        sameNameMessageRule: sameNameMessageRule,
        sameHeaderMessageRule: sameHeaderMessageRule,
        sameFooterMessageRule: sameFooterMessageRule,
        sameAvatarMessageRule: sameAvatarMessageRule,
        customClassMessageRule: customClassMessageRule,
        renderMessage: renderMessage
      }));

      if (typing) {
        _zmpMessages.current.showTyping();
      }
    });
  };

  var onDestroy = function onDestroy() {
    if (_zmpMessages.current && _zmpMessages.current.destroy) _zmpMessages.current.destroy();
    _zmpMessages.current = null;
  };

  (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(function () {
    onMount();
    return onDestroy;
  }, []);
  (0, _useIsomorphicLayoutEffect.useIsomorphicLayoutEffect)(function () {
    var wasMounted = mounted.current;
    mounted.current = true;
    if (!init || !elRef.current) return;
    var childElements = elRef.current.children;
    if (!childElements) return;
    var childrenAfterUpdated = childElements.length;

    if (!wasMounted) {
      for (var i = 0; i < childElements.length; i += 1) {
        childElements[i].classList.add('message-appeared');
      }

      return;
    }

    for (var _i = 0; _i < childElements.length; _i += 1) {
      if (!childElements[_i].classList.contains('message-appeared')) {
        childElements[_i].classList.add('message-appear-from-bottom');
      }
    }

    if (_zmpMessages.current) {
      if (_zmpMessages.current.layout && autoLayout) {
        _zmpMessages.current.layout();
      }

      if (childrenBeforeUpdated.current !== childrenAfterUpdated && _zmpMessages.current.scroll && scrollMessages) {
        _zmpMessages.current.scroll();
      }
    }

    childrenBeforeUpdated.current = childrenAfterUpdated;
  });
  (0, _watchProp.watchProp)(typing, function (newValue) {
    if (!_zmpMessages.current) return;
    if (newValue) _zmpMessages.current.showTyping();else _zmpMessages.current.hideTyping();
  });
  var classes = (0, _utils.classNames)(className, 'messages', (0, _mixins.colorClasses)(props));
  return /*#__PURE__*/_react.default.createElement("div", (0, _extends2.default)({
    id: id,
    style: style,
    className: classes,
    ref: elRef
  }, extraAttrs), children);
});
Messages.displayName = 'zmp-messages';
var _default = Messages;
exports.default = _default;