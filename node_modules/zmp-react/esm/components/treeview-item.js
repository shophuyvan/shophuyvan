import _extends from "@babel/runtime/helpers/extends";
import React, { forwardRef, useRef, useImperativeHandle } from 'react';
import { useIsomorphicLayoutEffect } from '../shared/use-isomorphic-layout-effect';
import { classNames, getExtraAttrs, getSlots, emit } from '../shared/utils';
import { colorClasses, actionsAttrs, actionsClasses, routerAttrs, routerClasses } from '../shared/mixins';
import { useIcon } from '../shared/use-icon';
import { zmpready, zmp } from '../shared/zmp';

var TreeviewItem = /*#__PURE__*/forwardRef(function (props, ref) {
  var className = props.className,
      id = props.id,
      style = props.style,
      toggle = props.toggle,
      itemToggle = props.itemToggle,
      selectable = props.selectable,
      selected = props.selected,
      opened = props.opened,
      label = props.label,
      loadChildren = props.loadChildren,
      link = props.link;
  var extraAttrs = getExtraAttrs(props);
  var elRef = useRef(null);

  var onClick = function onClick(event) {
    emit(props, 'click', event);
  };

  var onOpen = function onOpen(el) {
    if (elRef.current !== el) return;
    emit(props, 'treeviewOpen', el);
  };

  var onClose = function onClose(el) {
    if (elRef.current !== el) return;
    emit(props, 'treeviewClose', el);
  };

  var onLoadChildren = function onLoadChildren(el, done) {
    if (elRef.current !== el) return;
    emit(props, 'treeviewLoadChildren', el, done);
  };

  useImperativeHandle(ref, function () {
    return {
      el: elRef.current
    };
  });

  var attachEvents = function attachEvents() {
    if (!elRef.current) return;
    zmpready(function () {
      zmp.on('treeviewOpen', onOpen);
      zmp.on('treeviewClose', onClose);
      zmp.on('treeviewLoadChildren', onLoadChildren);
    });
  };

  var detachEvents = function detachEvents() {
    if (!zmp) return;
    zmp.off('treeviewOpen', onOpen);
    zmp.off('treeviewClose', onClose);
    zmp.off('treeviewLoadChildren', onLoadChildren);
  };

  useIsomorphicLayoutEffect(function () {
    attachEvents();
    return detachEvents;
  });
  var slots = getSlots(props);
  var hasChildren = slots.default && slots.default.length || slots.children && slots.children.length || slots['children-start'] && slots['children-start'].length;
  var needToggle = typeof toggle === 'undefined' ? hasChildren : toggle;
  var iconEl = useIcon(props);
  var TreeviewRootTag = link || link === '' ? 'a' : 'div';
  var classes = classNames(className, 'treeview-item', {
    'treeview-item-opened': opened,
    'treeview-load-children': loadChildren
  }, colorClasses(props));
  var itemRootClasses = classNames('treeview-item-root', {
    'treeview-item-selectable': selectable,
    'treeview-item-selected': selected,
    'treeview-item-toggle': itemToggle
  }, routerClasses(props), actionsClasses(props));
  var href = link;
  if (link === true) href = '#';
  if (link === false) href = undefined; // no href attribute

  var itemRootAttrs = _extends({
    href: href
  }, routerAttrs(props), actionsAttrs(props));

  return /*#__PURE__*/React.createElement("div", _extends({
    id: id,
    style: style,
    className: classes,
    ref: elRef
  }, extraAttrs), /*#__PURE__*/React.createElement(TreeviewRootTag, _extends({
    onClick: onClick,
    className: itemRootClasses
  }, itemRootAttrs), slots['root-start'], needToggle && /*#__PURE__*/React.createElement("div", {
    className: "treeview-toggle"
  }), /*#__PURE__*/React.createElement("div", {
    className: "treeview-item-content"
  }, slots['content-start'], iconEl, slots.media, /*#__PURE__*/React.createElement("div", {
    className: "treeview-item-label"
  }, slots['label-start'], label, slots.label), slots.content, slots['content-end']), slots.root, slots['root-end']), hasChildren && /*#__PURE__*/React.createElement("div", {
    className: "treeview-item-children"
  }, slots['children-start'], slots.default, slots.children));
});
TreeviewItem.displayName = 'zmp-treeview-item';
export default TreeviewItem;