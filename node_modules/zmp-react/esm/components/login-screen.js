import _extends from "@babel/runtime/helpers/extends";
import React, { forwardRef, useRef, useImperativeHandle } from 'react';
import { useIsomorphicLayoutEffect } from '../shared/use-isomorphic-layout-effect';
import { classNames, getExtraAttrs, emit } from '../shared/utils';
import { colorClasses } from '../shared/mixins';
import { zmpready, zmp } from '../shared/zmp';
import { watchProp } from '../shared/watch-prop';
import { modalStateClasses } from '../shared/modal-state-classes';


var LoginScreen = /*#__PURE__*/forwardRef(function (props, ref) {
  var _zmpLoginScreen = useRef(null);

  var className = props.className,
      id = props.id,
      style = props.style,
      children = props.children,
      opened = props.opened,
      animate = props.animate,
      containerEl = props.containerEl;
  var extraAttrs = getExtraAttrs(props);
  var isOpened = useRef(opened);
  var isClosing = useRef(false);
  var elRef = useRef(null);

  var onOpen = function onOpen(instance) {
    isOpened.current = true;
    isClosing.current = false;
    emit(props, 'loginScreenOpen', instance);
  };

  var onOpened = function onOpened(instance) {
    emit(props, 'loginScreenOpened', instance);
  };

  var onClose = function onClose(instance) {
    isOpened.current = false;
    isClosing.current = true;
    emit(props, 'loginScreenClose', instance);
  };

  var onClosed = function onClosed(instance) {
    isClosing.current = false;
    emit(props, 'loginScreenClosed', instance);
  };

  useImperativeHandle(ref, function () {
    return {
      el: elRef.current,
      zmpLoginScreen: function zmpLoginScreen() {
        return _zmpLoginScreen.current;
      }
    };
  }); // watch opened changes

  watchProp(opened, function (value) {
    if (!_zmpLoginScreen.current) return;

    if (value) {
      _zmpLoginScreen.current.open();
    } else {
      _zmpLoginScreen.current.close();
    }
  });

  var onMount = function onMount() {
    if (!elRef.current) return;
    zmpready(function () {
      var loginScreenParams = {
        el: elRef.current,
        on: {
          open: onOpen,
          opened: onOpened,
          close: onClose,
          closed: onClosed
        }
      };
      if ('animate' in props) loginScreenParams.animate = animate;
      if ('containerEl' in props) loginScreenParams.containerEl = containerEl;
      _zmpLoginScreen.current = zmp.loginScreen.create(loginScreenParams);

      if (opened) {
        _zmpLoginScreen.current.open(false);
      }
    });
  };

  var onDestroy = function onDestroy() {
    if (_zmpLoginScreen.current) {
      _zmpLoginScreen.current.destroy();
    }

    _zmpLoginScreen.current = null;
  };

  useIsomorphicLayoutEffect(function () {
    onMount();
    return onDestroy;
  }, []);
  var classes = classNames(className, 'login-screen', modalStateClasses({
    isOpened: isOpened,
    isClosing: isClosing
  }), colorClasses(props));
  return /*#__PURE__*/React.createElement("div", _extends({
    id: id,
    style: style,
    className: classes,
    ref: elRef
  }, extraAttrs), children);
});
LoginScreen.displayName = 'zmp-login-screen';
export default LoginScreen;