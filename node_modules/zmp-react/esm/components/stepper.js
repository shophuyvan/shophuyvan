import _extends from "@babel/runtime/helpers/extends";
import React, { forwardRef, useRef, useImperativeHandle } from 'react';
import { useIsomorphicLayoutEffect } from '../shared/use-isomorphic-layout-effect';
import { classNames, getExtraAttrs, emit, noUndefinedProps } from '../shared/utils';
import { colorClasses } from '../shared/mixins';
import { zmpready, zmp } from '../shared/zmp';
import { watchProp } from '../shared/watch-prop';


var Stepper = /*#__PURE__*/forwardRef(function (props, ref) {
  var _zmpStepper = useRef(null);

  var className = props.className,
      id = props.id,
      style = props.style,
      _props$init = props.init,
      init = _props$init === void 0 ? true : _props$init,
      _props$value = props.value,
      value = _props$value === void 0 ? 0 : _props$value,
      _props$min = props.min,
      min = _props$min === void 0 ? 0 : _props$min,
      _props$max = props.max,
      max = _props$max === void 0 ? 100 : _props$max,
      _props$step = props.step,
      step = _props$step === void 0 ? 1 : _props$step,
      formatValue = props.formatValue,
      name = props.name,
      inputId = props.inputId,
      _props$input = props.input,
      input = _props$input === void 0 ? true : _props$input,
      _props$inputType = props.inputType,
      inputType = _props$inputType === void 0 ? 'text' : _props$inputType,
      _props$inputReadonly = props.inputReadonly,
      inputReadonly = _props$inputReadonly === void 0 ? false : _props$inputReadonly,
      _props$autorepeat = props.autorepeat,
      autorepeat = _props$autorepeat === void 0 ? false : _props$autorepeat,
      _props$autorepeatDyna = props.autorepeatDynamic,
      autorepeatDynamic = _props$autorepeatDyna === void 0 ? false : _props$autorepeatDyna,
      _props$wraps = props.wraps,
      wraps = _props$wraps === void 0 ? false : _props$wraps,
      _props$manualInputMod = props.manualInputMode,
      manualInputMode = _props$manualInputMod === void 0 ? false : _props$manualInputMod,
      _props$decimalPoint = props.decimalPoint,
      decimalPoint = _props$decimalPoint === void 0 ? 4 : _props$decimalPoint,
      _props$buttonsEndInpu = props.buttonsEndInputMode,
      buttonsEndInputMode = _props$buttonsEndInpu === void 0 ? true : _props$buttonsEndInpu,
      disabled = props.disabled,
      buttonsOnly = props.buttonsOnly,
      round = props.round,
      roundMd = props.roundMd,
      roundIos = props.roundIos,
      roundAurora = props.roundAurora,
      fill = props.fill,
      fillMd = props.fillMd,
      fillIos = props.fillIos,
      fillAurora = props.fillAurora,
      large = props.large,
      largeMd = props.largeMd,
      largeIos = props.largeIos,
      largeAurora = props.largeAurora,
      small = props.small,
      smallMd = props.smallMd,
      smallIos = props.smallIos,
      smallAurora = props.smallAurora,
      raised = props.raised,
      raisedMd = props.raisedMd,
      raisedIos = props.raisedIos,
      raisedAurora = props.raisedAurora;
  var extraAttrs = getExtraAttrs(props);
  var elRef = useRef(null);

  var increment = function increment() {
    if (!_zmpStepper.current) return;

    _zmpStepper.current.increment();
  };

  var decrement = function decrement() {
    if (!_zmpStepper.current) return;

    _zmpStepper.current.decrement();
  };

  var setValue = function setValue(newValue) {
    if (_zmpStepper.current && _zmpStepper.current.setValue) _zmpStepper.current.setValue(newValue);
  };

  var getValue = function getValue() {
    if (_zmpStepper.current && _zmpStepper.current.getValue) {
      return _zmpStepper.current.getValue();
    }

    return undefined;
  };

  var onInput = function onInput(event) {
    emit(props, 'input', event, _zmpStepper.current);
  };

  var onChange = function onChange(event) {
    emit(props, 'change', event, _zmpStepper.current);
  };

  var onMinusClick = function onMinusClick(event) {
    emit(props, 'stepperMinusClick', event, _zmpStepper.current);
  };

  var onPlusClick = function onPlusClick(event) {
    emit(props, 'stepperPlusClick', event, _zmpStepper.current);
  };

  useImperativeHandle(ref, function () {
    return {
      el: elRef.current,
      zmpStepper: function zmpStepper() {
        return _zmpStepper.current;
      },
      increment: increment,
      decrement: decrement,
      setValue: setValue,
      getValue: getValue
    };
  });
  watchProp(value, function (newValue) {
    if (!_zmpStepper.current) return;

    _zmpStepper.current.setValue(newValue);
  });

  var onMount = function onMount() {
    zmpready(function () {
      if (!init || !elRef.current) return;
      _zmpStepper.current = zmp.stepper.create(noUndefinedProps({
        el: elRef.current,
        min: min,
        max: max,
        value: value,
        step: step,
        formatValue: formatValue,
        autorepeat: autorepeat,
        autorepeatDynamic: autorepeatDynamic,
        wraps: wraps,
        manualInputMode: manualInputMode,
        decimalPoint: decimalPoint,
        buttonsEndInputMode: buttonsEndInputMode,
        on: {
          change: function change(stepper, newValue) {
            emit(props, 'stepperChange', newValue);
          }
        }
      }));
    });
  };

  var onDestroy = function onDestroy() {
    if (_zmpStepper.current && _zmpStepper.current.destroy) {
      _zmpStepper.current.destroy();
    }

    _zmpStepper.current = null;
  };

  useIsomorphicLayoutEffect(function () {
    onMount();
    return onDestroy;
  }, []);
  var inputWrapEl;
  var valueEl;

  if (input && !buttonsOnly) {
    var inputEl = /*#__PURE__*/React.createElement("input", {
      name: name,
      id: inputId,
      type: inputType,
      min: inputType === 'number' ? min : undefined,
      max: inputType === 'number' ? max : undefined,
      step: inputType === 'number' ? step : undefined,
      onInput: onInput,
      onChange: onChange,
      value: value,
      readOnly: inputReadonly
    });
    inputWrapEl = /*#__PURE__*/React.createElement("div", {
      className: "stepper-input-wrap"
    }, inputEl);
  }

  if (!input && !buttonsOnly) {
    valueEl = /*#__PURE__*/React.createElement("div", {
      className: "stepper-value"
    }, value);
  }

  var classes = classNames(className, 'stepper', {
    disabled: disabled,
    'stepper-round': round,
    'stepper-round-ios': roundIos,
    'stepper-round-md': roundMd,
    'stepper-round-aurora': roundAurora,
    'stepper-fill': fill,
    'stepper-fill-ios': fillIos,
    'stepper-fill-md': fillMd,
    'stepper-fill-aurora': fillAurora,
    'stepper-large': large,
    'stepper-large-ios': largeIos,
    'stepper-large-md': largeMd,
    'stepper-large-aurora': largeAurora,
    'stepper-small': small,
    'stepper-small-ios': smallIos,
    'stepper-small-md': smallMd,
    'stepper-small-aurora': smallAurora,
    'stepper-raised': raised,
    'stepper-raised-ios': raisedIos,
    'stepper-raised-md': raisedMd,
    'stepper-raised-aurora': raisedAurora
  }, colorClasses(props));
  return /*#__PURE__*/React.createElement("div", _extends({
    ref: elRef,
    id: id,
    style: style,
    className: classes
  }, extraAttrs), /*#__PURE__*/React.createElement("div", {
    className: "stepper-button-minus",
    onClick: onMinusClick
  }), inputWrapEl, valueEl, /*#__PURE__*/React.createElement("div", {
    className: "stepper-button-plus",
    onClick: onPlusClick
  }));
});
Stepper.displayName = 'zmp-stepper';
export default Stepper;