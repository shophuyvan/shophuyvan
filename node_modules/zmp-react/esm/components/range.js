import _extends from "@babel/runtime/helpers/extends";
import React, { forwardRef, useRef, useImperativeHandle } from 'react';
import { useIsomorphicLayoutEffect } from '../shared/use-isomorphic-layout-effect';
import { classNames, getExtraAttrs, noUndefinedProps, emit } from '../shared/utils';
import { colorClasses } from '../shared/mixins';
import { zmpready, zmp } from '../shared/zmp';
import { watchProp } from '../shared/watch-prop';

var Range = /*#__PURE__*/forwardRef(function (props, ref) {
  var _zmpRange = useRef(null);

  var className = props.className,
      id = props.id,
      style = props.style,
      children = props.children,
      _props$init = props.init,
      init = _props$init === void 0 ? true : _props$init,
      _props$value = props.value,
      value = _props$value === void 0 ? 0 : _props$value,
      _props$min = props.min,
      min = _props$min === void 0 ? 0 : _props$min,
      _props$max = props.max,
      max = _props$max === void 0 ? 100 : _props$max,
      _props$step = props.step,
      step = _props$step === void 0 ? 1 : _props$step,
      _props$label = props.label,
      label = _props$label === void 0 ? false : _props$label,
      _props$dual = props.dual,
      dual = _props$dual === void 0 ? false : _props$dual,
      _props$vertical = props.vertical,
      vertical = _props$vertical === void 0 ? false : _props$vertical,
      _props$verticalRevers = props.verticalReversed,
      verticalReversed = _props$verticalRevers === void 0 ? false : _props$verticalRevers,
      _props$draggableBar = props.draggableBar,
      draggableBar = _props$draggableBar === void 0 ? true : _props$draggableBar,
      formatLabel = props.formatLabel,
      _props$scale = props.scale,
      scale = _props$scale === void 0 ? false : _props$scale,
      _props$scaleSteps = props.scaleSteps,
      scaleSteps = _props$scaleSteps === void 0 ? 5 : _props$scaleSteps,
      _props$scaleSubSteps = props.scaleSubSteps,
      scaleSubSteps = _props$scaleSubSteps === void 0 ? 0 : _props$scaleSubSteps,
      formatScaleLabel = props.formatScaleLabel,
      _props$limitKnobPosit = props.limitKnobPosition,
      limitKnobPosition = _props$limitKnobPosit === void 0 ? undefined : _props$limitKnobPosit,
      name = props.name,
      input = props.input,
      inputId = props.inputId,
      disabled = props.disabled;
  var extraAttrs = getExtraAttrs(props);
  var elRef = useRef(null);
  useImperativeHandle(ref, function () {
    return {
      el: elRef.current,
      zmpRange: function zmpRange() {
        return _zmpRange.current;
      }
    };
  });
  watchProp(value, function (newValue) {
    if (!_zmpRange.current) return;
    var rangeValue = _zmpRange.current.value;

    if (Array.isArray(newValue) && Array.isArray(rangeValue)) {
      if (rangeValue[0] !== newValue[0] || rangeValue[1] !== newValue[1]) {
        _zmpRange.current.setValue(newValue);
      }
    } else {
      _zmpRange.current.setValue(newValue);
    }
  });

  var onMount = function onMount() {
    zmpready(function () {
      if (!init || !elRef.current) return;
      _zmpRange.current = zmp.range.create(noUndefinedProps({
        el: elRef.current,
        value: value,
        min: min,
        max: max,
        step: step,
        label: label,
        dual: dual,
        draggableBar: draggableBar,
        vertical: vertical,
        verticalReversed: verticalReversed,
        formatLabel: formatLabel,
        scale: scale,
        scaleSteps: scaleSteps,
        scaleSubSteps: scaleSubSteps,
        formatScaleLabel: formatScaleLabel,
        limitKnobPosition: limitKnobPosition,
        on: {
          change: function change(range, val) {
            emit(props, 'rangeChange', val);
          },
          changed: function changed(range, val) {
            emit(props, 'rangeChanged', val);
          }
        }
      }));
    });
  };

  var onDestroy = function onDestroy() {
    if (_zmpRange.current && _zmpRange.current.destroy) _zmpRange.current.destroy();
    _zmpRange.current = null;
  };

  useIsomorphicLayoutEffect(function () {
    onMount();
    return onDestroy;
  }, []);
  var classes = classNames(className, 'range-slider', {
    'range-slider-horizontal': !vertical,
    'range-slider-vertical': vertical,
    'range-slider-vertical-reversed': vertical && verticalReversed,
    disabled: disabled
  }, colorClasses(props));
  return /*#__PURE__*/React.createElement("div", _extends({
    ref: elRef,
    id: id,
    style: style,
    className: classes
  }, extraAttrs), input && /*#__PURE__*/React.createElement("input", {
    type: "range",
    name: name,
    id: inputId
  }), children);
});
Range.displayName = 'zmp-range';
export default Range;