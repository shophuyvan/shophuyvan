import _extends from "@babel/runtime/helpers/extends";
import React, { forwardRef, useRef, useImperativeHandle, useEffect } from 'react';
import NavLeft from './nav-left';
import NavTitle from './nav-title';
import Navbar from '../components/navbar';
import { classNames } from '../shared/utils';
import { DEFAULT_LARGE_NAVBAR_HEIGHT } from '../../common/constants';
/* dts-props
  id?: string | number;
  className?: string;
  style?: React.CSSProperties;
  backLink? : boolean | string
  backLinkUrl? : string
  backLinkForce? : boolean
  backLinkShowText? : boolean
  sliding? : boolean
  title? : string
  subtitle? : string
  hidden? : boolean
  fill?: boolean
  noShadow? : boolean
  noHairline? : boolean
  innerClass? : string
  innerClassName? : string
  large? : boolean
  largeTransparent? : boolean
  transparent? : boolean
  titleLarge? : string
  COLOR_PROPS
  onNavbarHide? : (...args: any[]) => void
  onNavbarShow? : (...args: any[]) => void
  onNavbarExpand? : (...args: any[]) => void
  onNavbarCollapse? : (...args: any[]) => void
  onNavbarTransparentShow? : (...args: any[]) => void
  onNavbarTransparentHide? : (...args: any[]) => void
  onBackClick? : (event?: any) => void
  onClickBack? : (event?: any) => void
  ref?: React.MutableRefObject<{el: HTMLElement | null}>;
  CHILDREN_PROP
*/

var ZMPNavbar = /*#__PURE__*/forwardRef(function (props, ref) {
  var backLink = props.backLink,
      backLinkForce = props.backLinkForce,
      backLinkUrl = props.backLinkUrl,
      backLinkShowText = props.backLinkShowText,
      onBackClick = props.onBackClick,
      fill = props.fill,
      className = props.className,
      title = props.title,
      subtitle = props.subtitle,
      large = props.large;
  var elRef = useRef(null);
  useEffect(function () {
    if (large) {
      // eslint-disable-next-line no-restricted-globals
      var root = document.documentElement;
      var height = elRef.current.el ? elRef.current.el.offsetHeight : DEFAULT_LARGE_NAVBAR_HEIGHT;
      root.style.setProperty('--zmp-navbar-height', height + "px");
    }
  }, []);
  useImperativeHandle(ref, function () {
    return elRef.current;
  });
  var leftEl;
  var titleEl;

  if (backLink) {
    leftEl = /*#__PURE__*/React.createElement(NavLeft, {
      slot: "nav-left",
      backLink: backLink,
      backLinkUrl: backLinkUrl,
      backLinkForce: backLinkForce,
      backLinkShowText: backLinkShowText,
      onBackClick: onBackClick
    });
  }

  if (title || subtitle) {
    titleEl = /*#__PURE__*/React.createElement(NavTitle, {
      title: title,
      subtitle: subtitle
    });
  }

  var classes = '';

  if (fill) {
    classes = classNames(className, 'zmp-navbar-fill');
  }

  return /*#__PURE__*/React.createElement(Navbar, _extends({
    className: classes || className
  }, props, {
    backLink: false,
    title: false,
    subtitle: false,
    ref: elRef
  }), leftEl, titleEl, props.children);
});
ZMPNavbar.displayName = 'zmp-navbar';
export default ZMPNavbar;