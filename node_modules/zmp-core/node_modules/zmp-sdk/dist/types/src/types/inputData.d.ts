import { NetworkType } from './enum';
export declare type CallbackType = {
    success?: (res: object) => any;
    fail?: (res: object) => any;
};
/**
 * Type of right menu config
 */
export declare type RightMenu = {
    data: Object[];
    supportToolBar: number;
    reset: number;
};
/**
 * Type of window config
 */
export declare type WindowConfig = {
    /**
     * Title app.
     */
    titleHeader?: string;
    /**
     * 0: Default | 1: Sensor | 2: Force portrait | 3: Force landscape
     */
    orientation?: 0 | 1 | 2 | 3;
    /**
     * Color.
     */
    color?: string;
    /**
     * Right menu.
     */
    rightMenu?: RightMenu;
    /**
     * Left menu.
     */
    leftMenu?: NavBarLeftMenuType;
};
/**
 * Type of mini app config
 */
export declare type SDKConfig = {
    window: WindowConfig;
    debug: boolean;
};
/**
 * Map Type of navigation bar left menu
 */
declare type NavBarLeftMenuMap = {
    exitWithoutConfirm: {
        /**
         * `0` - back
         * `1` - close
         * `2` - both
         */
        buttonType: 0 | 1 | 2;
        confirmToExit: 0;
    };
    exitWithNativeConfirm: {
        /**
         * `0` - back
         * `1` - close
         * `2` - both
         */
        buttonType: 0 | 1 | 2;
        confirmToExit: 1;
        /**
         * Show this message when close
         */
        dialogMessage: string;
    };
    exitWithUserHandleClose: {
        /**
         * `0` - back
         * `1` - close
         * `2` - both
         */
        buttonType: 0 | 1 | 2;
        confirmToExit: 2;
        /**
         * Exec this function when close
         */
        handleCloseEvent: Function;
    };
};
declare type MenuItem = {
    /**
     * Title of a menu item
     */
    title: string;
    /**
     * Native action
     */
    action: string;
    /**
     * If ```showAsAction``` is 1 and ```iconUrl``` can load, this item will be shown outside and next to more-button. Maximum 2 item will be shown
     */
    showAsAction: 0 | 1;
    /**
     * Specifies icon of a menu item
     */
    iconUrl: string;
    /**
     * Data depends on ```action```
     */
    data: Object;
};
/**
 * Possible types navigation bar left menu
 */
export declare type NavBarLeftMenuType = NavBarLeftMenuMap[keyof NavBarLeftMenuMap];
/**
 * Possible types navigation bar right menu
 */
export declare type NavBarRightMenuType = CallbackType & {
    /**
     * Toolbar on header of right menu
     *  - 0: Hide
     *  - 1: If right menu is show, header of right menu will have toolbar
     */
    supportToolBar: 0 | 1;
    /**
     * Reset right menu:
     *  - 0: If menuListItems is empty, right menu will hide
     *  - 1: Reset to default right menu, skip other config
     */
    reset: 0 | 1;
    menuListItems: Array<MenuItem>;
};
/**
 * Possible type navigation bar title
 */
export declare type NavBarTitleType = CallbackType & {
    title: string;
};
/**
 * Possible type navigation bar color
 */
export declare type NavBarColorType = CallbackType & {
    color: string;
};
/**
 * Possible value orientation
 */
export declare type DeviceOrientationType = CallbackType & {
    rotate: 0 | 1 | 2 | 3;
};
/**
 * Set Storage data type
 */
export declare type SetStorageDataType = CallbackType & {
    key: string;
    data: any;
};
/**
 * Get Storage data type
 */
export declare type GetStorageDataType = CallbackType & {
    key: string;
    isPrefix?: boolean;
};
/**
 * Remove Storage data type
 */
export declare type RemoveStorageDataType = CallbackType & {
    key: string;
};
/**
 * Clear Storage data type
 */
export declare type ClearStorageDataType = CallbackType & {
    prefix?: string;
};
/**
 * Get Storage data type
 */
export declare type StorageInfoDataType = CallbackType & {
    currentSize: number;
    limitSize: number;
};
/**
 * Start Beacon Discovery data type
 */
export declare type StartBeaconDiscoveryDataType = CallbackType & {
    /** The list of iBeacon device broadcast UUIDs. Only when ```scanningType: 1``` */
    uuids: Array<string>;
    /**
     * Scanning Type:
     * 0: Scanning with list uuids default
     * 1: Scanning with list uuids that user entered
     */
    scanningType: 0 | 1;
    /**
     * Scanning Config
     */
    scanConfig: {
        scanTime: Number;
        timeBetweenScan: Number;
        beaconTimeout: Number;
    };
};
/**
 * On network status change callback
 * @typedef OnNetworkStatusChangeCallback
 */
export declare type OnNetworkStatusChangeCallback = {
    /** Indicates whether it is connected to the network */
    isConnected: boolean;
    /** Network Type */
    networkType: NetworkType;
};
export {};
