import * as InputDataType from '../types/inputData';
import { ZaloMiniProgramSDK } from './sdk';
export declare class DataCaching {
    /**
     * Stores data in the specified key in the local cache.
     * This operation will overwrite the original content of the key.
     *
     * @async
     * @function setStorage
     * @category Data Caching
     *
     * @example
     * zmpApis.setStorage({
     *  key: "key",
     *  data: "value"
     * }).then((res) => {
     *  console.log("Success");
     * }).catch((error) => {
     *  console.log("Fail");
     * });
     *
     * @param {Object} object
     * @param {string} object.key - The specified key in the local cache
     * @param {any} object.data - Contents to be stored can only be native types, dates, and objects that can be serialized via ```JSON.stringify```.
     *
     */
    static setStorage(this: ZaloMiniProgramSDK, object: InputDataType.SetStorageDataType): Promise<string>;
    /**
     * Asynchronously gets the content of the specified key from the local cache.
     *
     * @async
     * @function getStorage
     * @category Data Caching
     *
     * @example
     * zmpApis.getStorage({
     *  key: "key",
     *  isPrefix: false
     * }).then((res) => {
     *  console.log("Success");
     * }).catch((error) => {
     *  console.log("Fail");
     * });
     *
     * @param {Object} object
     * @param {string} object.key - The specified key in the local cache
     *
     */
    static getStorage(this: ZaloMiniProgramSDK, object: InputDataType.GetStorageDataType): Promise<any>;
    /**
     * Asynchronously gets the information related to the current storage.
     *
     * @async
     * @function getStorageInfo
     * @category Data Caching
     *
     * @example
     * zmpApis.getStorageInfo().then((res) => {
     *  console.log("Success");
     * }).catch((error) => {
     *  console.log("Fail");
     * });
     *
     * @param {Object} object
     */
    static getStorageInfo(this: ZaloMiniProgramSDK, object?: InputDataType.CallbackType): Promise<InputDataType.StorageInfoDataType>;
    /**
     * Removes the specified key from the local cache.
     *
     * @async
     * @function removeStorage
     * @category Data Caching
     *
     * @example
     * zmpApis.removeStorage({
     *  key: 'key'
     * }).then((res) => {
     *  console.log("Success");
     * }).catch((error) => {
     *  console.log("Fail");
     * });
     *
     * @param {Object} object
     * @param {string} object.key - The specified key in the local cache
     */
    static removeStorage(this: ZaloMiniProgramSDK, object: InputDataType.RemoveStorageDataType): Promise<any>;
    /**
     * Clears the data cached locally.
     *
     * @async
     * @function clearStorage
     * @category Data Caching
     *
     * @example
     * zmpApis.clearStorage({
     *  prefix: "prefix" // optional
     * }).then((res) => {
     *  console.log("Success");
     * }).catch((error) => {
     *  console.log("Fail");
     * });
     *
     * @param {Object} object
     */
    static clearStorage(this: ZaloMiniProgramSDK, option?: InputDataType.ClearStorageDataType): Promise<any>;
}
