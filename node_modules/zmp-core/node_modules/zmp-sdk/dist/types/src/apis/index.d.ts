import { SDK } from './sdk';
import * as InputDataType from '../types/inputData';
import * as CallbackDataType from '../types/callbackData';
export declare abstract class SDKCreator {
    protected abstract getInstance(): SDK;
    ZJSBridge: any;
    /**
     * Login to call more action.
     *
     * @async
     * @function Login
     * @category Authentication
     *
     * @example
     * zmpApis.login().then((res) => {
     *  console.log("Success");
     * }).catch((error) => {
     *  console.log("Fail");
     * });
     *
     */
    login(object?: InputDataType.CallbackType): Promise<string>;
    /**
     * Get Access Token.
     *
     * @async
     * @function getAccessToken
     * @category Authentication
     *
     * @example
     * zmpApis.getAccessToken().then((res) => {
     *  console.log("Success");
     * }).catch((error) => {
     *  console.log("Fail");
     * });
     *
     */
    getAccessToken(object?: InputDataType.CallbackType): Promise<string | null>;
    getVersion(): string;
    setNavigationBarTitle(object: InputDataType.NavBarTitleType): Promise<any>;
    setNavigationBarColor(object: InputDataType.NavBarColorType): Promise<any>;
    setNavigationBarLeftButton(object: InputDataType.NavBarLeftMenuType): Promise<any>;
    setDeviceOrientation(object: InputDataType.DeviceOrientationType): Promise<void>;
    setStorage(object: InputDataType.SetStorageDataType): Promise<any>;
    getStorage(object: InputDataType.GetStorageDataType): Promise<any>;
    getStorageInfo(object: InputDataType.CallbackType): Promise<any>;
    removeStorage(object: InputDataType.RemoveStorageDataType): Promise<any>;
    clearStorage(object: InputDataType.ClearStorageDataType): Promise<any>;
    getUserInfo(object: InputDataType.CallbackType): Promise<CallbackDataType.getUserInfoSuccessCallback>;
    getNetworkType(object: InputDataType.CallbackType): Promise<CallbackDataType.NetworkTypeSuccessCallback>;
    onNetworkStatusChange(callback: (res: InputDataType.OnNetworkStatusChangeCallback) => void): Promise<void>;
    startBeaconDiscovery(object: InputDataType.StartBeaconDiscoveryDataType): Promise<boolean>;
    stopBeaconDiscovery(object: InputDataType.CallbackType): Promise<boolean>;
    getBeacons(object: InputDataType.CallbackType): Promise<CallbackDataType.iBeaconSuccessCallback>;
    closeApp(object: InputDataType.CallbackType): Promise<any>;
    getLocation(object: InputDataType.CallbackType): Promise<CallbackDataType.getLocationSuccessCallback>;
}
export declare class ZaloMiniAppSDKCreator extends SDKCreator {
    protected getInstance(): SDK;
}
export declare class MockSDKCreator extends SDKCreator {
    protected getInstance(): SDK;
}
