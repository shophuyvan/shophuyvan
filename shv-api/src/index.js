
/**
 * SHV API - minimal Worker (setup + login)
 */
const textEncoder = new TextEncoder();
function toHex(buf){return [...new Uint8Array(buf)].map(b=>b.toString(16).padStart(2,'0')).join('');}
async function sha256Hex(str){const data=textEncoder.encode(str);const digest=await crypto.subtle.digest('SHA-256',data);return toHex(digest);}
function jsonResponse(obj,status=200,extraHeaders={}){return new Response(JSON.stringify(obj),{status,headers:{'content-type':'application/json; charset=utf-8','access-control-allow-origin':'*','access-control-allow-headers':'content-type,x-setup-key','access-control-allow-methods':'GET,POST,OPTIONS',...extraHeaders}});}
async function readJson(req){const ct=req.headers.get('content-type')||'';if(!ct.includes('application/json'))return null;try{return await req.json();}catch{return null;}}
async function handleOptions(){return new Response(null,{status:204,headers:{'access-control-allow-origin':'*','access-control-allow-headers':'content-type,x-setup-key','access-control-allow-methods':'GET,POST,OPTIONS','access-control-max-age':'86400'}});}
export default{async fetch(request,env,ctx){const url=new URL(request.url);const {pathname}=url;if(request.method==='OPTIONS')return handleOptions();
if(request.method==='POST'&&pathname==='/admin/setup'){const key=request.headers.get('x-setup-key')||'';if(!env.SETUP_KEY){return jsonResponse({ok:false,error:'SETUP_KEY not configured in Worker env.'},500);}if(key!==env.SETUP_KEY){return jsonResponse({ok:false,error:'Forbidden: invalid setup key.'},403);}const data=await readJson(request);if(!data||!data.u||!data.p){return jsonResponse({ok:false,error:'Body must be JSON: {u, p}'},400);}const username=String(data.u).trim().toLowerCase();if(!/^[a-z0-9_\-.]{3,32}$/.test(username)){return jsonResponse({ok:false,error:'Username invalid. Use 3-32 chars a-z0-9._-'},400);}const existing=await env.AUTH_KV.get(`admin:${username}`,{type:'json'});if(existing){return jsonResponse({ok:false,error:'Admin already exists.'},409);}const salt=crypto.getRandomValues(new Uint8Array(16));const saltHex=[...salt].map(b=>b.toString(16).padStart(2,'0')).join('');const hash=await sha256Hex(saltHex+':'+data.p);const rec={username,hash,salt:saltHex,createdAt:Date.now()};await env.AUTH_KV.put(`admin:${username}`,JSON.stringify(rec));return jsonResponse({ok:true,created:username});}
if(request.method==='POST'&&pathname==='/admin/login'){const data=await readJson(request);if(!data||!data.u||!data.p){return jsonResponse({ok:false,error:'Body must be JSON: {u, p}'},400);}const username=String(data.u).trim().toLowerCase();const rec=await env.AUTH_KV.get(`admin:${username}`,{type:'json'});if(!rec)return jsonResponse({ok:false,error:'Sai tài khoản hoặc mật khẩu.'},401);const hash=await sha256Hex(rec.salt+':'+data.p);if(hash!==rec.hash)return jsonResponse({ok:false,error:'Sai tài khoản hoặc mật khẩu.'},401);const token=(await sha256Hex(rec.username+':'+rec.createdAt+':'+crypto.getRandomValues(new Uint8Array(8)).toString())).slice(0,32);await env.AUTH_KV.put(`session:${token}`,JSON.stringify({u:rec.username,t:Date.now()}),{expirationTtl:60*60*24*7});return jsonResponse({ok:true,token});}
if(request.method==='GET'&&pathname==='/admin/whoami'){const token=url.searchParams.get('token')||'';const sess=token?await env.AUTH_KV.get(`session:${token}`,{type:'json'}):null;if(!sess)return jsonResponse({ok:false,error:'Invalid or expired token'},401);return jsonResponse({ok:true,user:sess.u});}
return new Response('shv-api ok',{status:200,headers:{'content-type':'text/plain'}});}};
